{"ast":null,"code":"import * as xml2js from 'xml2js';\nconst DATA_URL = '/assets/czasopisma.xml';\nclass MagazinesDB {\n  constructor(http) {\n    this.http = http;\n    this.czasopisma = [];\n    this.query = ({\n      name\n    } = {}) => this.czasopisma.filter(czasopismo => name ? czasopismo.name === name : true);\n    this.load = () => this.http.get(DATA_URL, {\n      responseType: 'text'\n    }).subscribe(data => {\n      const rawCzasopisma = this.convertToJSON(data).czasopisma;\n      this.czasopisma = Object.entries(rawCzasopisma).reduce((acc, [name, value]) => {\n        if (name === 'zmienne' || name === 'lata') return acc;\n        const publications = Object.values(value).map(publication => new Publication(publication.nazwa, publication.numer, publication.stron, publication.miniaturka, publication.format, publication.plik, publication.podeslal, publication.przetworzenie, publication.skan, publication.wydawca));\n        const czasopismo = new Magazie(name, rawCzasopisma.zmienne[name].src, rawCzasopisma.lata[name].split(','), publications);\n        acc.push(czasopismo);\n        return acc;\n      }, []);\n      console.log(this.czasopisma);\n    });\n    this.convertToJSON = xml => {\n      let res = null;\n      const parser = new xml2js.Parser({\n        explicitArray: false\n      });\n      parser.parseString(xml, (err, result) => res = result);\n      return res;\n    };\n    this.load();\n  }\n}\nclass Magazie {\n  constructor(name, thumbnail, years = [], publications) {\n    this.name = name;\n    this.thumbnail = thumbnail;\n    this.years = years;\n    this.publications = publications;\n  }\n}\nclass Publication {\n  constructor(name, number, pages, thumbnail, format, file, uploader, editor, scanner, publisher) {\n    this.name = name;\n    this.number = number;\n    this.pages = pages;\n    this.thumbnail = thumbnail;\n    this.format = format;\n    this.file = file;\n    this.uploader = uploader;\n    this.editor = editor;\n    this.scanner = scanner;\n    this.publisher = publisher;\n  }\n}\nexport { MagazinesDB as Czasopisma };","map":{"version":3,"names":["xml2js","DATA_URL","MagazinesDB","constructor","http","czasopisma","query","name","filter","czasopismo","load","get","responseType","subscribe","data","rawCzasopisma","convertToJSON","Object","entries","reduce","acc","value","publications","values","map","publication","Publication","nazwa","numer","stron","miniaturka","format","plik","podeslal","przetworzenie","skan","wydawca","Magazie","zmienne","src","lata","split","push","console","log","xml","res","parser","Parser","explicitArray","parseString","err","result","thumbnail","years","number","pages","file","uploader","editor","scanner","publisher","Czasopisma"],"sources":["/home/nikodem/projects/school/src/app/helpers.ts"],"sourcesContent":["import { HttpClient } from '@angular/common/http';\nimport * as xml2js from 'xml2js';\n\nconst DATA_URL = '/assets/czasopisma.xml';\n\nclass MagazinesDB {\n    public czasopisma: Magazie[] = [];\n    public query = ({\n        name\n    }: {\n        name?: string\n    } = {}) => this.czasopisma\n        .filter(czasopismo => (\n            name? czasopismo.name === name: true\n        ));\n\n\tconstructor(private http: HttpClient) {\n        this.load();\n    }\n\n    private load = () =>\n        this.http.get(DATA_URL, { responseType: 'text' })\n            .subscribe(data => {\n                const rawCzasopisma = this.convertToJSON(data).czasopisma\n\n                this.czasopisma = Object.entries(rawCzasopisma).reduce((acc, [name, value]) => {\n                    if (name === 'zmienne' || name === 'lata')\n                        return acc;\n\n                    const publications = Object.values(value as any[])\n                        .map(publication => new Publication(\n                            publication.nazwa,\n                            publication.numer,\n                            publication.stron,\n\n                            publication.miniaturka,\n                            publication.format,\n                            publication.plik,\n\n                            publication.podeslal,\n                            publication.przetworzenie,\n                            publication.skan,\n                            publication.wydawca,\n                        ));\n                    const czasopismo = new Magazie(\n                        name,\n                        rawCzasopisma.zmienne[name].src,\n                        rawCzasopisma.lata[name].split(','),\n                        publications\n                    )\n\n                    acc.push(czasopismo);\n                    return acc;\n                }, [] as Magazie[])\n\n                console.log(this.czasopisma);\n            });\n\n    private convertToJSON = (xml: string) => {\n        let res: any = null\n\n        const parser = new xml2js.Parser({explicitArray: false});\n        parser.parseString(xml, (err, result) => res = result);\n\n        return res;\n    }\n}\n\nclass Magazie {\n    constructor(\n        public name: string,\n        public thumbnail: string,\n        public years: string[] = [],\n        public publications: Publication[]\n    ) {}\n}\n\nclass Publication {\n    constructor(\n        public name: string,\n        public number: string,\n        public pages: number,\n\n        public thumbnail: string,\n        public format: string,\n        public file: string,\n\n        public uploader: string,\n        public editor: string,\n        public scanner: string,\n        public publisher: string,\n    ) {}\n}\n\nexport { MagazinesDB as Czasopisma };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}