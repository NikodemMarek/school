{"ast":null,"code":"import { Mark } from './../types';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common\";\nimport * as i2 from \"./tile.component\";\nfunction GameBoardComponent_tr_1_td_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r7 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"td\")(1, \"app-game-tile\", 1);\n    i0.ɵɵlistener(\"click\", function GameBoardComponent_tr_1_td_1_Template_app_game_tile_click_1_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r7);\n      const x_r5 = restoredCtx.index;\n      const y_r2 = i0.ɵɵnextContext().index;\n      const ctx_r6 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r6.setMark(x_r5, y_r2));\n    });\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const mark_r4 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"value\", mark_r4);\n  }\n}\nfunction GameBoardComponent_tr_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"tr\");\n    i0.ɵɵtemplate(1, GameBoardComponent_tr_1_td_1_Template, 2, 1, \"td\", 0);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const row_r1 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", row_r1);\n  }\n}\nexport class GameBoardComponent {\n  set size(value) {\n    console.log('size', value);\n    this._size = value;\n    this.board = this.newBoard(value.x, value.y);\n  }\n  constructor() {\n    this._size = {\n      x: 5,\n      y: 5\n    };\n    this.nextMark = Mark.O;\n    this.newBoard = (x, y) => JSON.parse(JSON.stringify(Array(y).fill(Array(x).fill(Mark.None))));\n    this.setMark = (x, y) => {\n      this.board[y][x] = this.nextMark;\n      this.nextMark = this.nextMark === Mark.X ? Mark.O : Mark.X;\n    };\n    this.board = this.newBoard(5, 5);\n    this.size = {\n      x: 5,\n      y: 5\n    };\n  }\n}\nGameBoardComponent.ɵfac = function GameBoardComponent_Factory(t) {\n  return new (t || GameBoardComponent)();\n};\nGameBoardComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: GameBoardComponent,\n  selectors: [[\"app-game-board\"]],\n  inputs: {\n    size: \"size\"\n  },\n  decls: 2,\n  vars: 1,\n  consts: [[4, \"ngFor\", \"ngForOf\"], [3, \"value\", \"click\"]],\n  template: function GameBoardComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"table\");\n      i0.ɵɵtemplate(1, GameBoardComponent_tr_1_Template, 2, 1, \"tr\", 0);\n      i0.ɵɵelementEnd();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngForOf\", ctx.board);\n    }\n  },\n  dependencies: [i1.NgForOf, i2.GameTileComponent],\n  styles: [\"[_nghost-%COMP%]   table[_ngcontent-%COMP%] {\\n  border-collapse: collapse;\\n  table-layout: fixed;\\n}\\n\\n[_nghost-%COMP%]   table[_ngcontent-%COMP%]   td[_ngcontent-%COMP%] {\\n  border: 1px solid black;\\n  aspect-ratio: 1;\\n  width: 50px;\\n  height: 50px;\\n}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvZ2FtZS9ib2FyZC5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0k7RUFDSSx5QkFBQTtFQUNBLG1CQUFBO0FBQVI7O0FBR007RUFDRSx1QkFBQTtFQUNBLGVBQUE7RUFDQSxXQUFBO0VBQ0EsWUFBQTtBQUFSIiwic291cmNlc0NvbnRlbnQiOlsiXG4gICAgOmhvc3QgdGFibGUge1xuICAgICAgICBib3JkZXItY29sbGFwc2U6IGNvbGxhcHNlO1xuICAgICAgICB0YWJsZS1sYXlvdXQ6IGZpeGVkO1xuICAgICAgfVxuXG4gICAgICA6aG9zdCB0YWJsZSB0ZCB7XG4gICAgICAgIGJvcmRlcjogMXB4IHNvbGlkIGJsYWNrO1xuICAgICAgICBhc3BlY3QtcmF0aW86IDE7XG4gICAgICAgIHdpZHRoOiA1MHB4O1xuICAgICAgICBoZWlnaHQ6IDUwcHg7XG4gICAgICB9XG4gICAgIl0sInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"mappings":"AAAA,SAASA,IAAI,QAAQ,YAAY;;;;;;;IAQzBC,EAAA,CAAAC,cAAA,SAA4C;IAGxCD,EAAA,CAAAE,UAAA,mBAAAC,qEAAA;MAAA,MAAAC,WAAA,GAAAJ,EAAA,CAAAK,aAAA,CAAAC,GAAA;MAAA,MAAAC,IAAA,GAAAH,WAAA,CAAAI,KAAA;MAAA,MAAAC,IAAA,GAAAT,EAAA,CAAAU,aAAA,GAAAF,KAAA;MAAA,MAAAG,MAAA,GAAAX,EAAA,CAAAU,aAAA;MAAA,OAASV,EAAA,CAAAY,WAAA,CAAAD,MAAA,CAAAE,OAAA,CAAAN,IAAA,EAAAE,IAAA,CAAa;IAAA,EAAC;IACtBT,EAAA,CAAAc,YAAA,EAAgB;;;;IAFjBd,EAAA,CAAAe,SAAA,GAAc;IAAdf,EAAA,CAAAgB,UAAA,UAAAC,OAAA,CAAc;;;;;IAHpBjB,EAAA,CAAAC,cAAA,SAA6C;IAC3CD,EAAA,CAAAkB,UAAA,IAAAC,qCAAA,gBAKK;IACPnB,EAAA,CAAAc,YAAA,EAAK;;;;IANkBd,EAAA,CAAAe,SAAA,GAAQ;IAARf,EAAA,CAAAgB,UAAA,YAAAI,MAAA,CAAQ;;;AAyBrC,OAAM,MAAOC,kBAAkB;EAE7B,IACIC,IAAIA,CAACC,KAA+B;IACtCC,OAAO,CAACC,GAAG,CAAC,MAAM,EAAEF,KAAK,CAAC;IAC1B,IAAI,CAACG,KAAK,GAAGH,KAAK;IAClB,IAAI,CAACI,KAAK,GAAG,IAAI,CAACC,QAAQ,CAACL,KAAK,CAACM,CAAC,EAAEN,KAAK,CAACO,CAAC,CAAC;EAC9C;EAMAC,YAAA;IAZQ,KAAAL,KAAK,GAA6B;MAAEG,CAAC,EAAE,CAAC;MAAEC,CAAC,EAAE;IAAC,CAAE;IAUhD,KAAAE,QAAQ,GAASjC,IAAI,CAACkC,CAAC;IAO/B,KAAAL,QAAQ,GAAG,CAACC,CAAS,EAAEC,CAAS,KAAKI,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,SAAS,CAACC,KAAK,CAACP,CAAC,CAAC,CAACQ,IAAI,CAACD,KAAK,CAACR,CAAC,CAAC,CAACS,IAAI,CAACvC,IAAI,CAACwC,IAAI,CAAC,CAAC,CAAC,CAAC;IAExG,KAAA1B,OAAO,GAAG,CAACgB,CAAS,EAAEC,CAAS,KAAI;MACjC,IAAI,CAACH,KAAK,CAACG,CAAC,CAAC,CAACD,CAAC,CAAC,GAAG,IAAI,CAACG,QAAQ;MAEhC,IAAI,CAACA,QAAQ,GAAG,IAAI,CAACA,QAAQ,KAAKjC,IAAI,CAACyC,CAAC,GAAGzC,IAAI,CAACkC,CAAC,GAAGlC,IAAI,CAACyC,CAAC;IAC5D,CAAC;IAVC,IAAI,CAACb,KAAK,GAAG,IAAI,CAACC,QAAQ,CAAC,CAAC,EAAE,CAAC,CAAC;IAChC,IAAI,CAACN,IAAI,GAAG;MAAEO,CAAC,EAAE,CAAC;MAAEC,CAAC,EAAE;IAAC,CAAE;EAC5B;;AAhBWT,kBAAkB;mBAAlBA,kBAAkB;AAAA;AAAlBA,kBAAkB;QAAlBA,kBAAkB;EAAAoB,SAAA;EAAAC,MAAA;IAAApB,IAAA;EAAA;EAAAqB,KAAA;EAAAC,IAAA;EAAAC,MAAA;EAAAC,QAAA,WAAAC,4BAAAC,EAAA,EAAAC,GAAA;IAAA,IAAAD,EAAA;MA3B3BhD,EAAA,CAAAC,cAAA,YAAO;MACLD,EAAA,CAAAkB,UAAA,IAAAgC,gCAAA,gBAOK;MACPlD,EAAA,CAAAc,YAAA,EAAQ;;;MARcd,EAAA,CAAAe,SAAA,GAAU;MAAVf,EAAA,CAAAgB,UAAA,YAAAiC,GAAA,CAAAtB,KAAA,CAAU","names":["Mark","i0","ɵɵelementStart","ɵɵlistener","GameBoardComponent_tr_1_td_1_Template_app_game_tile_click_1_listener","restoredCtx","ɵɵrestoreView","_r7","x_r5","index","y_r2","ɵɵnextContext","ctx_r6","ɵɵresetView","setMark","ɵɵelementEnd","ɵɵadvance","ɵɵproperty","mark_r4","ɵɵtemplate","GameBoardComponent_tr_1_td_1_Template","row_r1","GameBoardComponent","size","value","console","log","_size","board","newBoard","x","y","constructor","nextMark","O","JSON","parse","stringify","Array","fill","None","X","selectors","inputs","decls","vars","consts","template","GameBoardComponent_Template","rf","ctx","GameBoardComponent_tr_1_Template"],"sourceRoot":"","sources":["/home/nikodem/projects/school/src/app/game/board.component.ts"],"sourcesContent":["import { Mark } from './../types';\nimport { Component, Input } from '@angular/core';\n\n@Component({\n  selector: 'app-game-board',\n  template: `\n    <table>\n      <tr *ngFor=\"let row of board; let y = index\">\n        <td *ngFor=\"let mark of row; let x = index\">\n          <app-game-tile\n            [value]=\"mark\"\n            (click)=\"setMark(x, y)\"\n            ></app-game-tile>\n        </td>\n      </tr>\n    </table>\n  `,\n  styles: [\n    `\n    :host table {\n        border-collapse: collapse;\n        table-layout: fixed;\n      }\n\n      :host table td {\n        border: 1px solid black;\n        aspect-ratio: 1;\n        width: 50px;\n        height: 50px;\n      }\n    `,\n  ],\n})\nexport class GameBoardComponent {\n  private _size: { x: number; y: number } = { x: 5, y: 5 };\n  @Input()\n  set size(value: { x: number; y: number }) {\n    console.log('size', value);\n    this._size = value;\n    this.board = this.newBoard(value.x, value.y);\n  }\n\n  protected board: Array<Array<Mark>>\n\n  private nextMark: Mark = Mark.O;\n\n  constructor() {\n    this.board = this.newBoard(5, 5);\n    this.size = { x: 5, y: 5 }\n  }\n\n  newBoard = (x: number, y: number) => JSON.parse(JSON.stringify(Array(y).fill(Array(x).fill(Mark.None))))\n\n  setMark = (x: number, y: number) => {\n    this.board[y][x] = this.nextMark;\n\n    this.nextMark = this.nextMark === Mark.X ? Mark.O : Mark.X;\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}