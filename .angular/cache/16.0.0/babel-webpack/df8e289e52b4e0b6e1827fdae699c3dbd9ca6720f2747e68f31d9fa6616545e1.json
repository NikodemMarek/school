{"ast":null,"code":"import { Mark } from \"./types\";\nexport class Opponent {\n  constructor(size) {\n    this.size = size;\n    this.lastAttack = {\n      x: -1,\n      y: -1\n    };\n    this.makeMove = (board, lastMove) => {\n      console.log(\"Opponent is thinking...\", lastMove);\n      const moves = this.getMoves(board);\n      return moves[Math.floor(Math.random() * moves.length)];\n    };\n    this.getMoves = board => {\n      const moves = [];\n      for (let y = 0; y < board.length; y++) {\n        const row = board[y];\n        for (let x = 0; x < row.length; x++) {\n          if (board[y][x] === Mark.None) moves.push({\n            x,\n            y\n          });\n        }\n      }\n      return moves;\n    };\n  }\n}","map":{"version":3,"mappings":"AAAA,SAASA,IAAI,QAAQ,SAAS;AAE9B,OAAM,MAAOC,QAAQ;EAGnBC,YAAoBC,IAA8B;IAA9B,KAAAA,IAAI,GAAJA,IAAI;IAFhB,KAAAC,UAAU,GAA6B;MAAEC,CAAC,EAAE,CAAC,CAAC;MAAEC,CAAC,EAAE,CAAC;IAAC,CAAE;IAI/D,KAAAC,QAAQ,GAAG,CAACC,KAAe,EAAEC,QAAkC,KAA8B;MAC3FC,OAAO,CAACC,GAAG,CAAC,yBAAyB,EAAEF,QAAQ,CAAC;MAChD,MAAMG,KAAK,GAAG,IAAI,CAACC,QAAQ,CAACL,KAAK,CAAC;MAElC,OAAOI,KAAK,CAACE,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,EAAE,GAAGJ,KAAK,CAACK,MAAM,CAAC,CAAC;IACxD,CAAC;IAED,KAAAJ,QAAQ,GAAIL,KAAe,IAAgC;MACzD,MAAMI,KAAK,GAA+B,EAAE;MAE5C,KAAK,IAAIN,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGE,KAAK,CAACS,MAAM,EAAEX,CAAC,EAAE,EAAE;QACrC,MAAMY,GAAG,GAAGV,KAAK,CAACF,CAAC,CAAC;QACpB,KAAK,IAAID,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGa,GAAG,CAACD,MAAM,EAAEZ,CAAC,EAAE,EAAE;UACnC,IAAIG,KAAK,CAACF,CAAC,CAAC,CAACD,CAAC,CAAC,KAAKL,IAAI,CAACmB,IAAI,EAAEP,KAAK,CAACQ,IAAI,CAAC;YAAEf,CAAC;YAAEC;UAAC,CAAE,CAAC;;;MAIvD,OAAOM,KAAK;IACd,CAAC;EApBoD","names":["Mark","Opponent","constructor","size","lastAttack","x","y","makeMove","board","lastMove","console","log","moves","getMoves","Math","floor","random","length","row","None","push"],"sourceRoot":"","sources":["/home/nikodem/projects/school/src/app/opponentai.ts"],"sourcesContent":["import { Mark } from \"./types\";\n\nexport class Opponent {\n  private lastAttack: { x: number, y: number } = { x: -1, y: -1 };\n\n  constructor(private size: { x: number, y: number }) {}\n\n  makeMove = (board: Mark[][], lastMove: { x: number, y: number }): { x: number, y: number } => {\n    console.log(\"Opponent is thinking...\", lastMove);\n    const moves = this.getMoves(board);\n\n    return moves[Math.floor(Math.random() * moves.length)];\n  }\n\n  getMoves = (board: Mark[][]): { x: number, y: number }[] => {\n    const moves: { x: number, y: number }[] = [];\n\n    for (let y = 0; y < board.length; y++) {\n      const row = board[y];\n      for (let x = 0; x < row.length; x++) {\n        if (board[y][x] === Mark.None) moves.push({ x, y });\n      }\n    }\n\n    return moves;\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}