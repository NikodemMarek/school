{"ast":null,"code":"import { Mark } from \"./types\";\nexport class Opponent {\n  constructor(size) {\n    this.size = size;\n    this.nextAttack = null;\n    this.makeMove = (board, lastMove) => {\n      const moves = this.getMoves(board);\n      const getRandomMove = () => moves[Math.floor(Math.random() * moves.length)];\n      const saveMoves = this.shouldIBeAlamed(board, lastMove);\n      if (saveMoves.length <= 0) {\n        console.log('3', saveMoves);\n        return saveMoves[0];\n      }\n      if (this.nextAttack == lastMove) this.nextAttack = null;\n      if (!this.nextAttack) {\n        const thisAttack = getRandomMove();\n        this.nextAttack = this.getNextAttack(board, thisAttack);\n        console.log('0', thisAttack);\n        return thisAttack;\n      } else {\n        const thisAttack = this.nextAttack;\n        this.nextAttack = this.getNextAttack(board, thisAttack);\n        console.log('1', thisAttack);\n        return thisAttack;\n      }\n    };\n    this.getMoves = board => {\n      const moves = [];\n      for (let y = 0; y < board.length; y++) {\n        const row = board[y];\n        for (let x = 0; x < row.length; x++) {\n          if (board[y][x] === Mark.None) moves.push({\n            x,\n            y\n          });\n        }\n      }\n      return moves;\n    };\n    this.tilesWithMarkAound = (board, around, mark) => {\n      const {\n        x,\n        y\n      } = around;\n      const possibilities = [{\n        x: 1,\n        y: 1\n      }, {\n        x: 0,\n        y: 1\n      }, {\n        x: -1,\n        y: 1\n      }, {\n        x: -1,\n        y: 0\n      }, {\n        x: -1,\n        y: -1\n      }, {\n        x: 0,\n        y: -1\n      }, {\n        x: 1,\n        y: -1\n      }, {\n        x: 1,\n        y: 0\n      }];\n      const tilesAround = [];\n      for (const possibility of possibilities) {\n        const newX = x + possibility.x;\n        const newY = y + possibility.y;\n        if (newX >= 0 && newX < this.size.x && newY >= 0 && newY < this.size.y) if (board[newY][newX] === mark) tilesAround.push({\n          x: newX,\n          y: newY\n        });\n      }\n      return tilesAround;\n    };\n    this.getMovesAround = (board, origin) => this.tilesWithMarkAound(board, origin, Mark.None);\n    this.getMyMarksAround = (board, origin) => this.tilesWithMarkAound(board, origin, Mark.X);\n    this.getOppositeMoves = (moves, origin) => moves.map(({\n      x,\n      y\n    }) => ({\n      x: 2 * origin.x - x,\n      y: 2 * origin.y - y\n    }));\n    this.getOppositeFreeMoves = (board, origin) => this.getOppositeMoves(this.getMovesAround(board, origin), origin).filter(({\n      x,\n      y\n    }) => board[y][x] === Mark.None);\n    this.getNextAttack = (board, nextAttack) => {\n      const myTilesAround = this.getMyMarksAround(board, nextAttack);\n      if (myTilesAround.length <= 0) {\n        const movesAround = this.getMovesAround(board, nextAttack);\n        if (movesAround.length <= 0) {\n          return null;\n        } else {\n          return movesAround[0];\n        }\n      } else {\n        const freeOpposite = this.getOppositeFreeMoves(board, nextAttack);\n        if (freeOpposite.length <= 0) {\n          const movesAround = this.getMovesAround(board, nextAttack);\n          if (movesAround.length <= 0) {\n            return null;\n          } else {\n            return movesAround[0];\n          }\n        } else {\n          return freeOpposite[0];\n        }\n      }\n    };\n    this.shouldIBeAlamed = (board, lastMove) => {\n      const {\n        x,\n        y\n      } = lastMove;\n      const danger = [[{\n        x: 1,\n        y: 1\n      }, {\n        x: 2,\n        y: 2\n      }], [{\n        x: 0,\n        y: 1\n      }, {\n        x: 0,\n        y: 2\n      }], [{\n        x: -1,\n        y: 1\n      }, {\n        x: -2,\n        y: 2\n      }], [{\n        x: -1,\n        y: 0\n      }, {\n        x: -2,\n        y: 0\n      }], [{\n        x: -1,\n        y: -1\n      }, {\n        x: -2,\n        y: -2\n      }], [{\n        x: 0,\n        y: -1\n      }, {\n        x: 0,\n        y: -2\n      }], [{\n        x: 1,\n        y: -1\n      }, {\n        x: 2,\n        y: -2\n      }], [{\n        x: 1,\n        y: 0\n      }, {\n        x: 2,\n        y: 0\n      }]];\n      const available = [];\n      for (const direction of danger) {\n        if (board[y + direction[0].y]?.[x + direction[0].x] === Mark.X && board[y + direction[1].y]?.[x + direction[1].x] === Mark.X) {\n          const front = {\n            x: lastMove.x + direction[0].x * -1,\n            y: lastMove.y + direction[0].y * -1\n          };\n          const end = {\n            x: lastMove.x + direction[0].x * 3,\n            y: lastMove.y + direction[0].y * 3\n          };\n          if (board[front.y]?.[front.x] === Mark.None) available.push(front);\n          if (board[end.y]?.[end.x] === Mark.None) available.push(end);\n        }\n      }\n      return available;\n    };\n  }\n}","map":{"version":3,"mappings":"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","names":["Mark","Opponent","constructor","size","nextAttack","makeMove","board","lastMove","moves","getMoves","getRandomMove","Math","floor","random","length","saveMoves","shouldIBeAlamed","console","log","thisAttack","getNextAttack","y","row","x","None","push","tilesWithMarkAound","around","mark","possibilities","tilesAround","possibility","newX","newY","getMovesAround","origin","getMyMarksAround","X","getOppositeMoves","map","getOppositeFreeMoves","filter","myTilesAround","movesAround","freeOpposite","danger","available","direction","front","end"],"sourceRoot":"","sources":["/home/nikodem/projects/school/src/app/opponentai.ts"],"sourcesContent":["import { Mark } from \"./types\";\n\nexport class Opponent {\n  private nextAttack: { x: number, y: number } | null = null;\n\n  constructor(private size: { x: number, y: number }) {}\n\n  makeMove = (board: Mark[][], lastMove: { x: number, y: number }): { x: number, y: number } => {\n    const moves = this.getMoves(board);\n\n    const getRandomMove = () => moves[Math.floor(Math.random() * moves.length)];\n\n    const saveMoves = this.shouldIBeAlamed(board, lastMove);\n    if (saveMoves.length <= 0) {\n      console.log('3', saveMoves)\n      return saveMoves[0]\n    }\n\n    if (this.nextAttack == lastMove)\n      this.nextAttack = null\n\n    if (!this.nextAttack) {\n      const thisAttack = getRandomMove()\n      this.nextAttack = this.getNextAttack(board, thisAttack)\n      console.log('0', thisAttack)\n      return thisAttack\n    } else {\n      const thisAttack = this.nextAttack\n      this.nextAttack = this.getNextAttack(board, thisAttack)\n      console.log('1', thisAttack)\n      return thisAttack\n    }\n  }\n\n  private getMoves = (board: Mark[][]): { x: number, y: number }[] => {\n    const moves: { x: number, y: number }[] = [];\n\n    for (let y = 0; y < board.length; y++) {\n      const row = board[y];\n      for (let x = 0; x < row.length; x++) {\n        if (board[y][x] === Mark.None) moves.push({ x, y });\n      }\n    }\n\n    return moves;\n  }\n\n  private tilesWithMarkAound = (board: Mark[][], around: { x: number, y: number }, mark: Mark): { x: number, y: number }[] => {\n    const { x, y } = around;\n\n    const possibilities = [\n      { x: 1, y: 1 },\n      { x: 0, y: 1 },\n      { x: -1, y: 1 },\n      { x: -1, y: 0 },\n      { x: -1, y: -1 },\n      { x: 0, y: -1 },\n      { x: 1, y: -1 },\n      { x: 1, y: 0 },\n    ];\n\n    const tilesAround: { x: number, y: number }[] = [];\n    for (const possibility of possibilities) {\n      const newX = x + possibility.x;\n      const newY = y + possibility.y;\n\n      if (newX >= 0 && newX < this.size.x && newY >= 0 && newY < this.size.y)\n        if (board[newY][newX] === mark)\n          tilesAround.push({ x: newX, y: newY });\n    }\n\n    return tilesAround;\n  }\n\n  private getMovesAround = (board: Mark[][], origin: { x: number, y: number }): { x: number, y: number }[] =>\n    this.tilesWithMarkAound(board, origin, Mark.None);\n\n  private getMyMarksAround = (board: Mark[][], origin: { x: number, y: number }): { x: number, y: number }[] =>\n    this.tilesWithMarkAound(board, origin, Mark.X);\n\n  private getOppositeMoves = (moves: { x: number, y: number }[], origin: { x: number, y: number }): { x: number, y: number }[] =>\n    moves.map(({ x, y }) => ({\n      x: 2 * origin.x - x,\n      y: 2 * origin.y - y,\n    }))\n  private getOppositeFreeMoves = (board: Mark[][], origin: { x: number, y: number }): { x: number, y: number }[] =>\n    this.getOppositeMoves(this.getMovesAround(board, origin), origin).filter(({ x, y }) => board[y][x] === Mark.None)\n\n  private getNextAttack = (board: Mark[][], nextAttack: { x: number, y: number }): { x: number, y: number } | null => {\n    const myTilesAround = this.getMyMarksAround(board, nextAttack)\n\n    if (myTilesAround.length <= 0) {\n      const movesAround = this.getMovesAround(board, nextAttack)\n\n      if (movesAround.length <= 0) {\n        return null\n      } else {\n        return movesAround[0]\n      }\n    } else {\n      const freeOpposite = this.getOppositeFreeMoves(board, nextAttack)\n\n      if (freeOpposite.length <= 0) {\n        const movesAround = this.getMovesAround(board, nextAttack)\n\n        if (movesAround.length <= 0) {\n          return null\n        } else {\n          return movesAround[0]\n        }\n      } else {\n        return freeOpposite[0]\n      }\n    }\n  }\n\n  private shouldIBeAlamed = (board: Mark[][], lastMove: { x: number, y: number }): { x: number, y: number }[] => {\n    const { x, y } = lastMove;\n\n    const danger = [\n      [\n        { x: 1, y: 1 },\n        { x: 2, y: 2 },\n      ],\n      [\n        { x: 0, y: 1 },\n        { x: 0, y: 2 },\n      ],\n      [\n        { x: -1, y: 1 },\n        { x: -2, y: 2 },\n      ],\n      [\n        { x: -1, y: 0 },\n        { x: -2, y: 0 },\n      ],\n      [\n        { x: -1, y: -1 },\n        { x: -2, y: -2 },\n      ],\n      [\n        { x: 0, y: -1 },\n        { x: 0, y: -2 },\n      ],\n      [\n        { x: 1, y: -1 },\n        { x: 2, y: -2 },\n      ],\n      [\n        { x: 1, y: 0 },\n        { x: 2, y: 0 },\n      ],\n    ];\n\n    const available: { x: number, y: number }[] = [];\n    for (const direction of danger) {\n      if (\n        board[y + direction[0].y]?.[x + direction[0].x] === Mark.X\n        && board[y + direction[1].y]?.[x + direction[1].x] === Mark.X\n      ) {\n        const front = {\n          x: lastMove.x + direction[0].x * -1,\n          y: lastMove.y + direction[0].y * -1,\n        }\n        const end = {\n          x: lastMove.x + direction[0].x * 3,\n          y: lastMove.y + direction[0].y * 3,\n        }\n\n        if (board[front.y]?.[front.x] === Mark.None)\n          available.push(front)\n        if (board[end.y]?.[end.x] === Mark.None)\n          available.push(end)\n      }\n    }\n\n    return available\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}