{"ast":null,"code":"import { Mark } from \"./types\";\nexport class Opponent {\n  constructor(size) {\n    this.size = size;\n    this.nextAttack = null;\n    this.makeMove = (board, lastMove) => {\n      const moves = this.getMoves(board);\n      const getRandomMove = () => moves[Math.floor(Math.random() * moves.length)];\n      const move = this.shouldIBeAlamed(board, lastMove);\n      if (move && moves.includes(move)) return move;\n      if (!this.nextAttack) {\n        const randomMove = getRandomMove();\n        const movesAround = this.whereAreMyMarksAround(board, randomMove.x, randomMove.y);\n        if (!movesAround) {\n          this.nextAttack = this.getMovesAround(board, randomMove.x, randomMove.y)[0] || null;\n          return randomMove;\n        }\n        const moveWithNothingOpposite = movesAround?.find(({\n          x,\n          y\n        }) => board[2 * randomMove.y - y][2 * randomMove.x - x] === Mark.None);\n        if (!moveWithNothingOpposite) {\n          this.nextAttack = this.getMovesAround(board, randomMove.x, randomMove.y)[0] || null;\n          return randomMove;\n        }\n        this.nextAttack = moveWithNothingOpposite;\n        return randomMove;\n      }\n      const movesAround = this.whereAreMyMarksAround(board, this.nextAttack.x, this.nextAttack.y);\n      if (!movesAround) {\n        const attackThisTurn = this.nextAttack;\n        this.nextAttack = this.getMovesAround(board, this.nextAttack.x, this.nextAttack.y)[0] || null;\n        return attackThisTurn;\n      }\n      console.log(this.nextAttack);\n      const moveWithNothingOpposite = movesAround?.find(({\n        x,\n        y\n      }) => board[2 * this.nextAttack.y - y][2 * this.nextAttack.x - x] === Mark.None);\n      if (!moveWithNothingOpposite) {\n        const attackThisTurn = this.nextAttack;\n        this.nextAttack = this.getMovesAround(board, this.nextAttack.x, this.nextAttack.y)[0] || null;\n        return attackThisTurn;\n      }\n      this.nextAttack = moveWithNothingOpposite;\n      return this.nextAttack;\n    };\n    this.getMoves = board => {\n      const moves = [];\n      for (let y = 0; y < board.length; y++) {\n        const row = board[y];\n        for (let x = 0; x < row.length; x++) {\n          if (board[y][x] === Mark.None) moves.push({\n            x,\n            y\n          });\n        }\n      }\n      return moves;\n    };\n    this.getMovesAround = (board, x, y) => {\n      const possibilities = [{\n        x: 1,\n        y: 1\n      }, {\n        x: 0,\n        y: 1\n      }, {\n        x: -1,\n        y: 1\n      }, {\n        x: -1,\n        y: 0\n      }, {\n        x: -1,\n        y: -1\n      }, {\n        x: 0,\n        y: -1\n      }, {\n        x: 1,\n        y: -1\n      }, {\n        x: 1,\n        y: 0\n      }];\n      const movesAround = [];\n      for (const possibility of possibilities) {\n        const newX = x + possibility.x;\n        const newY = y + possibility.y;\n        if (newX >= 0 && newX < this.size.x && newY >= 0 && newY < this.size.y) if (board[newY][newX] === Mark.None) movesAround.push({\n          x: newX,\n          y: newY\n        });\n      }\n      return movesAround;\n    };\n    this.whereAreMyMarksAround = (board, x, y) => {\n      const possibilities = [{\n        x: 1,\n        y: 1\n      }, {\n        x: 0,\n        y: 1\n      }, {\n        x: -1,\n        y: 1\n      }, {\n        x: -1,\n        y: 0\n      }, {\n        x: -1,\n        y: -1\n      }, {\n        x: 0,\n        y: -1\n      }, {\n        x: 1,\n        y: -1\n      }, {\n        x: 1,\n        y: 0\n      }];\n      const marksAround = [];\n      for (const possibility of possibilities) {\n        const newX = x + possibility.x;\n        const newY = y + possibility.y;\n        if (newX >= 0 && newX < this.size.x && newY >= 0 && newY < this.size.y) if (board[newY][newX] === Mark.X) marksAround.push({\n          x: newX,\n          y: newY\n        });\n      }\n      if (marksAround.length > 0) return marksAround;\n      return null;\n    };\n    this.shouldIBeAlamed = (board, lastMove) => {\n      const {\n        x,\n        y\n      } = lastMove;\n      const danger = [[{\n        x: 1,\n        y: 1\n      }, {\n        x: 2,\n        y: 2\n      }], [{\n        x: 0,\n        y: 1\n      }, {\n        x: 0,\n        y: 2\n      }], [{\n        x: -1,\n        y: 1\n      }, {\n        x: -2,\n        y: 2\n      }], [{\n        x: -1,\n        y: 0\n      }, {\n        x: -2,\n        y: 0\n      }], [{\n        x: -1,\n        y: -1\n      }, {\n        x: -2,\n        y: -2\n      }], [{\n        x: 0,\n        y: -1\n      }, {\n        x: 0,\n        y: -2\n      }], [{\n        x: 1,\n        y: -1\n      }, {\n        x: 2,\n        y: -2\n      }], [{\n        x: 1,\n        y: 0\n      }, {\n        x: 2,\n        y: 0\n      }]];\n      for (const direction of danger) {\n        if (board[y + direction[0].y]?.[x + direction[0].x] === Mark.X && board[y + direction[1].y]?.[x + direction[1].x] === Mark.X) {\n          if (board[y + direction[0].y]?.[x + direction[0].x] === Mark.None) {\n            return {\n              x: x + direction[0].x,\n              y: y + direction[0].y\n            };\n          } else if (board[y + direction[1].y * 3]?.[x + direction[1].x * 3] === Mark.None) {\n            return {\n              x: x - direction[1].x * 3,\n              y: y - direction[1].y * 3\n            };\n          }\n        }\n      }\n      return null;\n    };\n  }\n}","map":{"version":3,"mappings":"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","names":["Mark","Opponent","constructor","size","nextAttack","makeMove","board","lastMove","moves","getMoves","getRandomMove","Math","floor","random","length","move","shouldIBeAlamed","includes","randomMove","movesAround","whereAreMyMarksAround","x","y","getMovesAround","moveWithNothingOpposite","find","None","attackThisTurn","console","log","row","push","possibilities","possibility","newX","newY","marksAround","X","danger","direction"],"sourceRoot":"","sources":["/home/nikodem/projects/school/src/app/opponentai.ts"],"sourcesContent":["import { Mark } from \"./types\";\n\nexport class Opponent {\n  private nextAttack: { x: number, y: number } | null = null;\n\n  constructor(private size: { x: number, y: number }) {}\n\n  makeMove = (board: Mark[][], lastMove: { x: number, y: number }): { x: number, y: number } => {\n    const moves = this.getMoves(board);\n\n    const getRandomMove = () => moves[Math.floor(Math.random() * moves.length)];\n\n    const move = this.shouldIBeAlamed(board, lastMove);\n    if (move && moves.includes(move))\n      return move;\n\n    if (!this.nextAttack) {\n      const randomMove = getRandomMove();\n      const movesAround = this.whereAreMyMarksAround(board, randomMove.x, randomMove.y)\n\n      if (!movesAround) {\n        this.nextAttack = this.getMovesAround(board, randomMove.x, randomMove.y)[0] || null\n        return randomMove;\n      }\n\n      const moveWithNothingOpposite = movesAround?.find(({ x, y }) => board[2 * randomMove.y - y][2 * randomMove.x - x] === Mark.None);\n      if (!moveWithNothingOpposite) {\n        this.nextAttack = this.getMovesAround(board, randomMove.x, randomMove.y)[0] || null\n        return randomMove;\n      }\n\n      this.nextAttack = moveWithNothingOpposite;\n      return randomMove;\n    }\n\n    const movesAround = this.whereAreMyMarksAround(board, this.nextAttack.x, this.nextAttack.y);\n    if (!movesAround) {\n      const attackThisTurn = this.nextAttack;\n      this.nextAttack = this.getMovesAround(board, this.nextAttack.x, this.nextAttack.y)[0] || null\n      return attackThisTurn;\n    }\n\n    console.log(this.nextAttack);\n\n    const moveWithNothingOpposite = movesAround?.find(({ x, y }) => board[2 * this.nextAttack!.y - y][2 * this.nextAttack!.x - x] === Mark.None);\n    if (!moveWithNothingOpposite) {\n      const attackThisTurn = this.nextAttack;\n      this.nextAttack = this.getMovesAround(board, this.nextAttack.x, this.nextAttack.y)[0] || null\n      return attackThisTurn;\n    }\n\n    this.nextAttack = moveWithNothingOpposite;\n    return this.nextAttack;\n  }\n\n  private getMoves = (board: Mark[][]): { x: number, y: number }[] => {\n    const moves: { x: number, y: number }[] = [];\n\n    for (let y = 0; y < board.length; y++) {\n      const row = board[y];\n      for (let x = 0; x < row.length; x++) {\n        if (board[y][x] === Mark.None) moves.push({ x, y });\n      }\n    }\n\n    return moves;\n  }\n\n  private getMovesAround = (board: Mark[][], x: number, y: number): { x: number, y: number }[] => {\n    const possibilities = [\n      { x: 1, y: 1 },\n      { x: 0, y: 1 },\n      { x: -1, y: 1 },\n      { x: -1, y: 0 },\n      { x: -1, y: -1 },\n      { x: 0, y: -1 },\n      { x: 1, y: -1 },\n      { x: 1, y: 0 },\n    ];\n\n    const movesAround: { x: number, y: number }[] = [];\n    for (const possibility of possibilities) {\n      const newX = x + possibility.x;\n      const newY = y + possibility.y;\n\n      if (newX >= 0 && newX < this.size.x && newY >= 0 && newY < this.size.y)\n        if (board[newY][newX] === Mark.None)\n          movesAround.push({ x: newX, y: newY });\n    }\n\n    return movesAround;\n  }\n\n  private whereAreMyMarksAround = (board: Mark[][], x: number, y: number): { x: number, y: number }[] | null => {\n    const possibilities = [\n      { x: 1, y: 1 },\n      { x: 0, y: 1 },\n      { x: -1, y: 1 },\n      { x: -1, y: 0 },\n      { x: -1, y: -1 },\n      { x: 0, y: -1 },\n      { x: 1, y: -1 },\n      { x: 1, y: 0 },\n    ];\n\n    const marksAround: { x: number, y: number }[] = [];\n    for (const possibility of possibilities) {\n      const newX = x + possibility.x;\n      const newY = y + possibility.y;\n\n      if (newX >= 0 && newX < this.size.x && newY >= 0 && newY < this.size.y)\n        if (board[newY][newX] === Mark.X)\n          marksAround.push({ x: newX, y: newY });\n    }\n\n    if (marksAround.length > 0)\n      return marksAround\n\n    return null;\n  }\n\n  private shouldIBeAlamed = (board: Mark[][], lastMove: { x: number, y: number }): { x: number, y: number } | null => {\n    const { x, y } = lastMove;\n\n    const danger = [\n      [\n        { x: 1, y: 1 },\n        { x: 2, y: 2 },\n      ],\n      [\n        { x: 0, y: 1 },\n        { x: 0, y: 2 },\n      ],\n      [\n        { x: -1, y: 1 },\n        { x: -2, y: 2 },\n      ],\n      [\n        { x: -1, y: 0 },\n        { x: -2, y: 0 },\n      ],\n      [\n        { x: -1, y: -1 },\n        { x: -2, y: -2 },\n      ],\n      [\n        { x: 0, y: -1 },\n        { x: 0, y: -2 },\n      ],\n      [\n        { x: 1, y: -1 },\n        { x: 2, y: -2 },\n      ],\n      [\n        { x: 1, y: 0 },\n        { x: 2, y: 0 },\n      ],\n    ];\n\n    for (const direction of danger) {\n      if (\n        board[y + direction[0].y]?.[x + direction[0].x] === Mark.X\n        && board[y + direction[1].y]?.[x + direction[1].x] === Mark.X\n      ) {\n        if (board[y + direction[0].y]?.[x + direction[0].x] === Mark.None) {\n          return {\n            x: x + direction[0].x,\n            y: y + direction[0].y,\n          };\n        } else if (board[y + direction[1].y * 3]?.[x + direction[1].x * 3] === Mark.None) {\n          return {\n            x: x - direction[1].x * 3,\n            y: y - direction[1].y * 3,\n          };\n        }\n      }\n    }\n\n    return null\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}