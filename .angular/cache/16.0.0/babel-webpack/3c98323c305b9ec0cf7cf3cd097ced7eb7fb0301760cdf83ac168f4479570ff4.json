{"ast":null,"code":"import { Mark } from \"./types\";\nexport class Opponent {\n  constructor(size) {\n    this.size = size;\n    this.board = [];\n    this.makeMove = (board, lastMove) => {\n      console.log(\"Opponent is thinking...\", lastMove);\n      const moves = this.getMoves(board);\n      this.opponentMoves.push(lastMove);\n      return moves[Math.floor(Math.random() * moves.length)];\n    };\n    this.getMoves = board => {\n      const moves = [];\n      for (let y = 0; y < board.length; y++) {\n        const row = board[y];\n        for (let x = 0; x < row.length; x++) {\n          if (board[y][x] === Mark.None) moves.push({\n            x,\n            y\n          });\n        }\n      }\n      return moves;\n    };\n    this.board = JSON.parse(JSON.stringify(Array(size.y).fill(Array(size.x).fill(Mark.None))));\n  }\n}","map":{"version":3,"mappings":"AAAA,SAASA,IAAI,QAAQ,SAAS;AAE9B,OAAM,MAAOC,QAAQ;EAGnBC,YAAoBC,IAA8B;IAA9B,KAAAA,IAAI,GAAJA,IAAI;IAFhB,KAAAC,KAAK,GAAe,EAAE;IAM9B,KAAAC,QAAQ,GAAG,CAACD,KAAe,EAAEE,QAAkC,KAA8B;MAC3FC,OAAO,CAACC,GAAG,CAAC,yBAAyB,EAAEF,QAAQ,CAAC;MAChD,MAAMG,KAAK,GAAG,IAAI,CAACC,QAAQ,CAACN,KAAK,CAAC;MAClC,IAAI,CAACO,aAAa,CAACC,IAAI,CAACN,QAAQ,CAAC;MAEjC,OAAOG,KAAK,CAACI,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,EAAE,GAAGN,KAAK,CAACO,MAAM,CAAC,CAAC;IACxD,CAAC;IAED,KAAAN,QAAQ,GAAIN,KAAe,IAAgC;MACzD,MAAMK,KAAK,GAA+B,EAAE;MAE5C,KAAK,IAAIQ,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGb,KAAK,CAACY,MAAM,EAAEC,CAAC,EAAE,EAAE;QACrC,MAAMC,GAAG,GAAGd,KAAK,CAACa,CAAC,CAAC;QACpB,KAAK,IAAIE,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGD,GAAG,CAACF,MAAM,EAAEG,CAAC,EAAE,EAAE;UACnC,IAAIf,KAAK,CAACa,CAAC,CAAC,CAACE,CAAC,CAAC,KAAKnB,IAAI,CAACoB,IAAI,EAAEX,KAAK,CAACG,IAAI,CAAC;YAAEO,CAAC;YAAEF;UAAC,CAAE,CAAC;;;MAIvD,OAAOR,KAAK;IACd,CAAC;IAtBC,IAAI,CAACL,KAAK,GAAGiB,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,SAAS,CAACC,KAAK,CAACrB,IAAI,CAACc,CAAC,CAAC,CAACQ,IAAI,CAACD,KAAK,CAACrB,IAAI,CAACgB,CAAC,CAAC,CAACM,IAAI,CAACzB,IAAI,CAACoB,IAAI,CAAC,CAAC,CAAC,CAAC;EAC5F","names":["Mark","Opponent","constructor","size","board","makeMove","lastMove","console","log","moves","getMoves","opponentMoves","push","Math","floor","random","length","y","row","x","None","JSON","parse","stringify","Array","fill"],"sourceRoot":"","sources":["/home/nikodem/projects/school/src/app/opponentai.ts"],"sourcesContent":["import { Mark } from \"./types\";\n\nexport class Opponent {\n  private board: number[][] = [];\n\n  constructor(private size: { x: number, y: number }) {\n    this.board = JSON.parse(JSON.stringify(Array(size.y).fill(Array(size.x).fill(Mark.None))))\n  }\n\n  makeMove = (board: Mark[][], lastMove: { x: number, y: number }): { x: number, y: number } => {\n    console.log(\"Opponent is thinking...\", lastMove);\n    const moves = this.getMoves(board);\n    this.opponentMoves.push(lastMove);\n\n    return moves[Math.floor(Math.random() * moves.length)];\n  }\n\n  getMoves = (board: Mark[][]): { x: number, y: number }[] => {\n    const moves: { x: number, y: number }[] = [];\n\n    for (let y = 0; y < board.length; y++) {\n      const row = board[y];\n      for (let x = 0; x < row.length; x++) {\n        if (board[y][x] === Mark.None) moves.push({ x, y });\n      }\n    }\n\n    return moves;\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}