{"ast":null,"code":"import { Mark } from \"./types\";\nexport class Opponent {\n  constructor(size) {\n    this.size = size;\n    this.nextAttack = null;\n    this.attackMap = null;\n    this.makeMove = (board, lastMove) => {\n      const moves = this.getMoves(board);\n      const getRandomMove = () => moves[Math.floor(Math.random() * moves.length)];\n      const saveMoves = this.shouldIBeAlamed(board, lastMove);\n      if (saveMoves.length > 0) return saveMoves[0];\n      if (!this.attackMap) {\n        const bestPoints = this.getBestPoints(board);\n        console.log('bestPoints', bestPoints);\n        this.attackMap = bestPoints[0];\n      }\n      return this.attackMap.find(({\n        x,\n        y\n      }) => board[y][x] === Mark.None) || getRandomMove();\n    };\n    this.getBestPoints = board => {\n      const freeCombinations = [[{\n        x: -2,\n        y: 0\n      }, {\n        x: -1,\n        y: 0\n      }, {\n        x: 1,\n        y: 0\n      }, {\n        x: 2,\n        y: 0\n      }], [{\n        x: 0,\n        y: -2\n      }, {\n        x: 0,\n        y: -1\n      }, {\n        x: 0,\n        y: 1\n      }, {\n        x: 0,\n        y: 2\n      }], [{\n        x: -2,\n        y: -2\n      }, {\n        x: -1,\n        y: -1\n      }, {\n        x: 1,\n        y: 1\n      }, {\n        x: 2,\n        y: 2\n      }], [{\n        x: -2,\n        y: 2\n      }, {\n        x: -1,\n        y: 1\n      }, {\n        x: 1,\n        y: -1\n      }, {\n        x: 2,\n        y: -2\n      }]];\n      const pointsToCheck = [];\n      for (let y = 0; y < board.length; y++) {\n        const row = board[y];\n        for (let x = 0; x < row.length; x++) {\n          if (board[y][x] === Mark.None || board[y][x] === Mark.X) pointsToCheck.push({\n            x,\n            y\n          });\n        }\n      }\n      const bests = pointsToCheck.map(({\n        x,\n        y\n      }) => {\n        const combinations = freeCombinations.filter(([a, b, c, d]) => (board[y + a.y]?.[x + a.x] === Mark.X || board[y + a.y]?.[x + a.x] === Mark.None) && (board[y + b.y]?.[x + b.x] === Mark.X || board[y + b.y]?.[x + b.x] === Mark.None) && (board[y + c.y]?.[x + c.x] === Mark.X || board[y + c.y]?.[x + c.x] === Mark.None) && (board[y + d.y]?.[x + d.x] === Mark.X || board[y + d.y]?.[x + d.x] === Mark.None));\n        return combinations.map(([a, b, c, d]) => {\n          return [{\n            x: x + a.x,\n            y: y + a.y\n          }, {\n            x: x + b.x,\n            y: y + b.y\n          }, {\n            x,\n            y\n          }, {\n            x: x + c.x,\n            y: y + c.y\n          }, {\n            x: x + d.x,\n            y: y + d.y\n          }];\n        });\n      });\n      return bests.flat();\n    };\n    this.getMoves = board => {\n      const moves = [];\n      for (let y = 0; y < board.length; y++) {\n        const row = board[y];\n        for (let x = 0; x < row.length; x++) {\n          if (board[y][x] === Mark.None) moves.push({\n            x,\n            y\n          });\n        }\n      }\n      return moves;\n    };\n    this.tilesWithMarkAound = (board, around, mark) => {\n      const {\n        x,\n        y\n      } = around;\n      const possibilities = [{\n        x: 1,\n        y: 1\n      }, {\n        x: 0,\n        y: 1\n      }, {\n        x: -1,\n        y: 1\n      }, {\n        x: -1,\n        y: 0\n      }, {\n        x: -1,\n        y: -1\n      }, {\n        x: 0,\n        y: -1\n      }, {\n        x: 1,\n        y: -1\n      }, {\n        x: 1,\n        y: 0\n      }];\n      const tilesAround = [];\n      for (const possibility of possibilities) {\n        const newX = x + possibility.x;\n        const newY = y + possibility.y;\n        if (newX >= 0 && newX < this.size.x && newY >= 0 && newY < this.size.y) if (board[newY][newX] === mark) tilesAround.push({\n          x: newX,\n          y: newY\n        });\n      }\n      return tilesAround;\n    };\n    this.getMovesAround = (board, origin) => this.tilesWithMarkAound(board, origin, Mark.None);\n    this.getMyMarksAround = (board, origin) => this.tilesWithMarkAound(board, origin, Mark.X);\n    this.getOppositeMoves = (moves, origin) => moves.map(({\n      x,\n      y\n    }) => ({\n      x: 2 * origin.x - x,\n      y: 2 * origin.y - y\n    }));\n    this.getOppositeFreeMoves = (board, origin) => {\n      // console.log('or', origin)\n      const rel = this.getMovesAround(board, origin);\n      // console.log('rel', rel)\n      const opp = this.getOppositeMoves(rel, origin);\n      // console.log('opp', opp)\n      const filt = opp.filter(({\n        x,\n        y\n      }) => board[y]?.[x] === Mark.None);\n      // console.log('filt', filt)\n      return filt;\n    };\n    this.getNextAttack = (board, nextAttack) => {\n      const myTilesAround = this.getMyMarksAround(board, nextAttack);\n      if (myTilesAround.length <= 0) {\n        // console.log('a')\n        const movesAround = this.getMovesAround(board, nextAttack);\n        if (movesAround.length <= 0) {\n          // console.log('b')\n          return null;\n        } else {\n          // console.log('c')\n          return movesAround[0];\n        }\n      } else {\n        // console.log('d')\n        const freeOpposite = this.getOppositeFreeMoves(board, nextAttack);\n        if (freeOpposite.length <= 0) {\n          // console.log('e')\n          const movesAround = this.getMovesAround(board, nextAttack);\n          if (movesAround.length <= 0) {\n            // console.log('f')\n            return null;\n          } else {\n            // console.log('g')\n            return movesAround[0];\n          }\n        } else {\n          // console.log('h')\n          return freeOpposite[0];\n        }\n      }\n    };\n    this.shouldIBeAlamed = (board, lastMove) => {\n      const {\n        x,\n        y\n      } = lastMove;\n      const danger = [[{\n        x: 1,\n        y: 1\n      }, {\n        x: 2,\n        y: 2\n      }], [{\n        x: 0,\n        y: 1\n      }, {\n        x: 0,\n        y: 2\n      }], [{\n        x: -1,\n        y: 1\n      }, {\n        x: -2,\n        y: 2\n      }], [{\n        x: -1,\n        y: 0\n      }, {\n        x: -2,\n        y: 0\n      }], [{\n        x: -1,\n        y: -1\n      }, {\n        x: -2,\n        y: -2\n      }], [{\n        x: 0,\n        y: -1\n      }, {\n        x: 0,\n        y: -2\n      }], [{\n        x: 1,\n        y: -1\n      }, {\n        x: 2,\n        y: -2\n      }], [{\n        x: 1,\n        y: 0\n      }, {\n        x: 2,\n        y: 0\n      }]];\n      const available = [];\n      for (const direction of danger) {\n        if (board[y + direction[0].y]?.[x + direction[0].x] === Mark.O && board[y + direction[1].y]?.[x + direction[1].x] === Mark.O) {\n          const front = {\n            x: lastMove.x - direction[0].x,\n            y: lastMove.y - direction[0].y\n          };\n          const end = {\n            x: lastMove.x + direction[0].x * 3,\n            y: lastMove.y + direction[0].y * 3\n          };\n          if (front.x >= 0 && front.x < this.size.x && front.y >= 0 && front.y < this.size.y && board[front.y][front.x] === Mark.None) available.push(front);\n          if (end.x >= 0 && end.x < this.size.x && end.y >= 0 && end.y < this.size.y && board[end.y][end.x] === Mark.None) available.push(end);\n        }\n      }\n      return available;\n    };\n  }\n}","map":{"version":3,"mappings":"AAAA,SAASA,IAAI,QAAQ,SAAS;AAE9B,OAAM,MAAOC,QAAQ;EAInBC,YAAoBC,IAA8B;IAA9B,KAAAA,IAAI,GAAJA,IAAI;IAHhB,KAAAC,UAAU,GAAoC,IAAI;IAClD,KAAAC,SAAS,GAAsC,IAAI;IAI3D,KAAAC,QAAQ,GAAG,CAACC,KAAe,EAAEC,QAAkC,KAA8B;MAC3F,MAAMC,KAAK,GAAG,IAAI,CAACC,QAAQ,CAACH,KAAK,CAAC;MAElC,MAAMI,aAAa,GAAGA,CAAA,KAAMF,KAAK,CAACG,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,EAAE,GAAGL,KAAK,CAACM,MAAM,CAAC,CAAC;MAE3E,MAAMC,SAAS,GAAG,IAAI,CAACC,eAAe,CAACV,KAAK,EAAEC,QAAQ,CAAC;MACvD,IAAIQ,SAAS,CAACD,MAAM,GAAG,CAAC,EACtB,OAAOC,SAAS,CAAC,CAAC,CAAC;MAErB,IAAI,CAAC,IAAI,CAACX,SAAS,EAAE;QACnB,MAAMa,UAAU,GAAG,IAAI,CAACC,aAAa,CAACZ,KAAK,CAAC;QAC5Ca,OAAO,CAACC,GAAG,CAAC,YAAY,EAAEH,UAAU,CAAC;QACrC,IAAI,CAACb,SAAS,GAAGa,UAAU,CAAC,CAAC,CAAC;;MAGhC,OAAO,IAAI,CAACb,SAAS,CAACiB,IAAI,CAAC,CAAC;QAAEC,CAAC;QAAEC;MAAC,CAAE,KAAKjB,KAAK,CAACiB,CAAC,CAAC,CAACD,CAAC,CAAC,KAAKvB,IAAI,CAACyB,IAAI,CAAC,IAAId,aAAa,EAAE;IAExF,CAAC;IAEO,KAAAQ,aAAa,GAAIZ,KAAe,IAAI;MAC1C,MAAMmB,gBAAgB,GAAG,CACvB,CACE;QAAEH,CAAC,EAAE,CAAC,CAAC;QAAEC,CAAC,EAAE;MAAC,CAAE,EACf;QAAED,CAAC,EAAE,CAAC,CAAC;QAAEC,CAAC,EAAE;MAAC,CAAE,EACf;QAAED,CAAC,EAAE,CAAC;QAAEC,CAAC,EAAE;MAAC,CAAE,EACd;QAAED,CAAC,EAAE,CAAC;QAAEC,CAAC,EAAE;MAAC,CAAE,CACf,EACD,CACE;QAAED,CAAC,EAAE,CAAC;QAAEC,CAAC,EAAE,CAAC;MAAC,CAAE,EACf;QAAED,CAAC,EAAE,CAAC;QAAEC,CAAC,EAAE,CAAC;MAAC,CAAE,EACf;QAAED,CAAC,EAAE,CAAC;QAAEC,CAAC,EAAE;MAAC,CAAE,EACd;QAAED,CAAC,EAAE,CAAC;QAAEC,CAAC,EAAE;MAAC,CAAE,CACf,EACD,CACE;QAAED,CAAC,EAAE,CAAC,CAAC;QAAEC,CAAC,EAAE,CAAC;MAAC,CAAE,EAChB;QAAED,CAAC,EAAE,CAAC,CAAC;QAAEC,CAAC,EAAE,CAAC;MAAC,CAAE,EAChB;QAAED,CAAC,EAAE,CAAC;QAAEC,CAAC,EAAE;MAAC,CAAE,EACd;QAAED,CAAC,EAAE,CAAC;QAAEC,CAAC,EAAE;MAAC,CAAE,CACf,EACD,CACE;QAAED,CAAC,EAAE,CAAC,CAAC;QAAEC,CAAC,EAAE;MAAC,CAAE,EACf;QAAED,CAAC,EAAE,CAAC,CAAC;QAAEC,CAAC,EAAE;MAAC,CAAE,EACf;QAAED,CAAC,EAAE,CAAC;QAAEC,CAAC,EAAE,CAAC;MAAC,CAAE,EACf;QAAED,CAAC,EAAE,CAAC;QAAEC,CAAC,EAAE,CAAC;MAAC,CAAE,CAChB,CACF;MAED,MAAMG,aAAa,GAA+B,EAAE;MACpD,KAAK,IAAIH,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGjB,KAAK,CAACQ,MAAM,EAAES,CAAC,EAAE,EAAE;QACrC,MAAMI,GAAG,GAAGrB,KAAK,CAACiB,CAAC,CAAC;QACpB,KAAK,IAAID,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGK,GAAG,CAACb,MAAM,EAAEQ,CAAC,EAAE,EAAE;UACnC,IAAIhB,KAAK,CAACiB,CAAC,CAAC,CAACD,CAAC,CAAC,KAAKvB,IAAI,CAACyB,IAAI,IAAIlB,KAAK,CAACiB,CAAC,CAAC,CAACD,CAAC,CAAC,KAAKvB,IAAI,CAAC6B,CAAC,EACrDF,aAAa,CAACG,IAAI,CAAC;YAAEP,CAAC;YAAEC;UAAC,CAAE,CAAC;;;MAIlC,MAAMO,KAAK,GAAGJ,aAAa,CAACK,GAAG,CAAC,CAAC;QAAET,CAAC;QAAEC;MAAC,CAAE,KAAI;QAC1C,MAAMS,YAAY,GAAGP,gBAAgB,CAACQ,MAAM,CAAC,CAAC,CAACC,CAAC,EAAEC,CAAC,EAAEC,CAAC,EAAEC,CAAC,CAAC,KACvD,CAAC/B,KAAK,CAACiB,CAAC,GAAGW,CAAC,CAACX,CAAC,CAAC,GAAGD,CAAC,GAAGY,CAAC,CAACZ,CAAC,CAAC,KAAKvB,IAAI,CAAC6B,CAAC,IAAItB,KAAK,CAACiB,CAAC,GAAGW,CAAC,CAACX,CAAC,CAAC,GAAGD,CAAC,GAAGY,CAAC,CAACZ,CAAC,CAAC,KAAKvB,IAAI,CAACyB,IAAI,MAC5ElB,KAAK,CAACiB,CAAC,GAAGY,CAAC,CAACZ,CAAC,CAAC,GAAGD,CAAC,GAAGa,CAAC,CAACb,CAAC,CAAC,KAAKvB,IAAI,CAAC6B,CAAC,IAAItB,KAAK,CAACiB,CAAC,GAAGY,CAAC,CAACZ,CAAC,CAAC,GAAGD,CAAC,GAAGa,CAAC,CAACb,CAAC,CAAC,KAAKvB,IAAI,CAACyB,IAAI,CAAC,KAChFlB,KAAK,CAACiB,CAAC,GAAGa,CAAC,CAACb,CAAC,CAAC,GAAGD,CAAC,GAAGc,CAAC,CAACd,CAAC,CAAC,KAAKvB,IAAI,CAAC6B,CAAC,IAAItB,KAAK,CAACiB,CAAC,GAAGa,CAAC,CAACb,CAAC,CAAC,GAAGD,CAAC,GAAGc,CAAC,CAACd,CAAC,CAAC,KAAKvB,IAAI,CAACyB,IAAI,CAAC,KAChFlB,KAAK,CAACiB,CAAC,GAAGc,CAAC,CAACd,CAAC,CAAC,GAAGD,CAAC,GAAGe,CAAC,CAACf,CAAC,CAAC,KAAKvB,IAAI,CAAC6B,CAAC,IAAItB,KAAK,CAACiB,CAAC,GAAGc,CAAC,CAACd,CAAC,CAAC,GAAGD,CAAC,GAAGe,CAAC,CAACf,CAAC,CAAC,KAAKvB,IAAI,CAACyB,IAAI,CAAC,CACvF;QAED,OAAOQ,YAAY,CAACD,GAAG,CAAC,CAAC,CAACG,CAAC,EAAEC,CAAC,EAAEC,CAAC,EAAEC,CAAC,CAAC,KAAI;UACvC,OAAO,CACL;YACEf,CAAC,EAAEA,CAAC,GAAGY,CAAC,CAACZ,CAAC;YACVC,CAAC,EAAEA,CAAC,GAAGW,CAAC,CAACX;WACV,EACD;YACED,CAAC,EAAEA,CAAC,GAAGa,CAAC,CAACb,CAAC;YACVC,CAAC,EAAEA,CAAC,GAAGY,CAAC,CAACZ;WACV,EACD;YAAED,CAAC;YAAEC;UAAC,CAAE,EACR;YACED,CAAC,EAAEA,CAAC,GAAGc,CAAC,CAACd,CAAC;YACVC,CAAC,EAAEA,CAAC,GAAGa,CAAC,CAACb;WACV,EACD;YACED,CAAC,EAAEA,CAAC,GAAGe,CAAC,CAACf,CAAC;YACVC,CAAC,EAAEA,CAAC,GAAGc,CAAC,CAACd;WACV,CACF;QACH,CAAC,CAAC;MACJ,CAAC,CAAC;MAEF,OAAOO,KAAK,CAACQ,IAAI,EAAE;IACrB,CAAC;IAEO,KAAA7B,QAAQ,GAAIH,KAAe,IAAgC;MACjE,MAAME,KAAK,GAA+B,EAAE;MAE5C,KAAK,IAAIe,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGjB,KAAK,CAACQ,MAAM,EAAES,CAAC,EAAE,EAAE;QACrC,MAAMI,GAAG,GAAGrB,KAAK,CAACiB,CAAC,CAAC;QACpB,KAAK,IAAID,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGK,GAAG,CAACb,MAAM,EAAEQ,CAAC,EAAE,EAAE;UACnC,IAAIhB,KAAK,CAACiB,CAAC,CAAC,CAACD,CAAC,CAAC,KAAKvB,IAAI,CAACyB,IAAI,EAAEhB,KAAK,CAACqB,IAAI,CAAC;YAAEP,CAAC;YAAEC;UAAC,CAAE,CAAC;;;MAIvD,OAAOf,KAAK;IACd,CAAC;IAEO,KAAA+B,kBAAkB,GAAG,CAACjC,KAAe,EAAEkC,MAAgC,EAAEC,IAAU,KAAgC;MACzH,MAAM;QAAEnB,CAAC;QAAEC;MAAC,CAAE,GAAGiB,MAAM;MAEvB,MAAME,aAAa,GAAG,CACpB;QAAEpB,CAAC,EAAE,CAAC;QAAEC,CAAC,EAAE;MAAC,CAAE,EACd;QAAED,CAAC,EAAE,CAAC;QAAEC,CAAC,EAAE;MAAC,CAAE,EACd;QAAED,CAAC,EAAE,CAAC,CAAC;QAAEC,CAAC,EAAE;MAAC,CAAE,EACf;QAAED,CAAC,EAAE,CAAC,CAAC;QAAEC,CAAC,EAAE;MAAC,CAAE,EACf;QAAED,CAAC,EAAE,CAAC,CAAC;QAAEC,CAAC,EAAE,CAAC;MAAC,CAAE,EAChB;QAAED,CAAC,EAAE,CAAC;QAAEC,CAAC,EAAE,CAAC;MAAC,CAAE,EACf;QAAED,CAAC,EAAE,CAAC;QAAEC,CAAC,EAAE,CAAC;MAAC,CAAE,EACf;QAAED,CAAC,EAAE,CAAC;QAAEC,CAAC,EAAE;MAAC,CAAE,CACf;MAED,MAAMoB,WAAW,GAA+B,EAAE;MAClD,KAAK,MAAMC,WAAW,IAAIF,aAAa,EAAE;QACvC,MAAMG,IAAI,GAAGvB,CAAC,GAAGsB,WAAW,CAACtB,CAAC;QAC9B,MAAMwB,IAAI,GAAGvB,CAAC,GAAGqB,WAAW,CAACrB,CAAC;QAE9B,IAAIsB,IAAI,IAAI,CAAC,IAAIA,IAAI,GAAG,IAAI,CAAC3C,IAAI,CAACoB,CAAC,IAAIwB,IAAI,IAAI,CAAC,IAAIA,IAAI,GAAG,IAAI,CAAC5C,IAAI,CAACqB,CAAC,EACpE,IAAIjB,KAAK,CAACwC,IAAI,CAAC,CAACD,IAAI,CAAC,KAAKJ,IAAI,EAC5BE,WAAW,CAACd,IAAI,CAAC;UAAEP,CAAC,EAAEuB,IAAI;UAAEtB,CAAC,EAAEuB;QAAI,CAAE,CAAC;;MAG5C,OAAOH,WAAW;IACpB,CAAC;IAEO,KAAAI,cAAc,GAAG,CAACzC,KAAe,EAAE0C,MAAgC,KACzE,IAAI,CAACT,kBAAkB,CAACjC,KAAK,EAAE0C,MAAM,EAAEjD,IAAI,CAACyB,IAAI,CAAC;IAE3C,KAAAyB,gBAAgB,GAAG,CAAC3C,KAAe,EAAE0C,MAAgC,KAC3E,IAAI,CAACT,kBAAkB,CAACjC,KAAK,EAAE0C,MAAM,EAAEjD,IAAI,CAAC6B,CAAC,CAAC;IAExC,KAAAsB,gBAAgB,GAAG,CAAC1C,KAAiC,EAAEwC,MAAgC,KAC7FxC,KAAK,CAACuB,GAAG,CAAC,CAAC;MAAET,CAAC;MAAEC;IAAC,CAAE,MAAM;MACvBD,CAAC,EAAE,CAAC,GAAG0B,MAAM,CAAC1B,CAAC,GAAGA,CAAC;MACnBC,CAAC,EAAE,CAAC,GAAGyB,MAAM,CAACzB,CAAC,GAAGA;KACnB,CAAC,CAAC;IACG,KAAA4B,oBAAoB,GAAG,CAAC7C,KAAe,EAAE0C,MAAgC,KAAgC;MAC/G;MAEA,MAAMI,GAAG,GAAG,IAAI,CAACL,cAAc,CAACzC,KAAK,EAAE0C,MAAM,CAAC;MAC9C;MAEA,MAAMK,GAAG,GAAG,IAAI,CAACH,gBAAgB,CAACE,GAAG,EAAEJ,MAAM,CAAC;MAC9C;MACA,MAAMM,IAAI,GAAGD,GAAG,CAACpB,MAAM,CAAC,CAAC;QAAEX,CAAC;QAAEC;MAAC,CAAE,KAAKjB,KAAK,CAACiB,CAAC,CAAC,GAAGD,CAAC,CAAC,KAAKvB,IAAI,CAACyB,IAAI,CAAC;MAClE;MACA,OAAO8B,IAAI;IACb,CAAC;IAEO,KAAAC,aAAa,GAAG,CAACjD,KAAe,EAAEH,UAAoC,KAAqC;MACjH,MAAMqD,aAAa,GAAG,IAAI,CAACP,gBAAgB,CAAC3C,KAAK,EAAEH,UAAU,CAAC;MAE9D,IAAIqD,aAAa,CAAC1C,MAAM,IAAI,CAAC,EAAE;QAC7B;QACA,MAAM2C,WAAW,GAAG,IAAI,CAACV,cAAc,CAACzC,KAAK,EAAEH,UAAU,CAAC;QAE1D,IAAIsD,WAAW,CAAC3C,MAAM,IAAI,CAAC,EAAE;UAC3B;UACA,OAAO,IAAI;SACZ,MAAM;UACL;UACA,OAAO2C,WAAW,CAAC,CAAC,CAAC;;OAExB,MAAM;QACL;QACA,MAAMC,YAAY,GAAG,IAAI,CAACP,oBAAoB,CAAC7C,KAAK,EAAEH,UAAU,CAAC;QAEjE,IAAIuD,YAAY,CAAC5C,MAAM,IAAI,CAAC,EAAE;UAC5B;UACA,MAAM2C,WAAW,GAAG,IAAI,CAACV,cAAc,CAACzC,KAAK,EAAEH,UAAU,CAAC;UAE1D,IAAIsD,WAAW,CAAC3C,MAAM,IAAI,CAAC,EAAE;YAC3B;YACA,OAAO,IAAI;WACZ,MAAM;YACL;YACA,OAAO2C,WAAW,CAAC,CAAC,CAAC;;SAExB,MAAM;UACL;UACA,OAAOC,YAAY,CAAC,CAAC,CAAC;;;IAG5B,CAAC;IAEO,KAAA1C,eAAe,GAAG,CAACV,KAAe,EAAEC,QAAkC,KAAgC;MAC5G,MAAM;QAAEe,CAAC;QAAEC;MAAC,CAAE,GAAGhB,QAAQ;MAEzB,MAAMoD,MAAM,GAAG,CACb,CACE;QAAErC,CAAC,EAAE,CAAC;QAAEC,CAAC,EAAE;MAAC,CAAE,EACd;QAAED,CAAC,EAAE,CAAC;QAAEC,CAAC,EAAE;MAAC,CAAE,CACf,EACD,CACE;QAAED,CAAC,EAAE,CAAC;QAAEC,CAAC,EAAE;MAAC,CAAE,EACd;QAAED,CAAC,EAAE,CAAC;QAAEC,CAAC,EAAE;MAAC,CAAE,CACf,EACD,CACE;QAAED,CAAC,EAAE,CAAC,CAAC;QAAEC,CAAC,EAAE;MAAC,CAAE,EACf;QAAED,CAAC,EAAE,CAAC,CAAC;QAAEC,CAAC,EAAE;MAAC,CAAE,CAChB,EACD,CACE;QAAED,CAAC,EAAE,CAAC,CAAC;QAAEC,CAAC,EAAE;MAAC,CAAE,EACf;QAAED,CAAC,EAAE,CAAC,CAAC;QAAEC,CAAC,EAAE;MAAC,CAAE,CAChB,EACD,CACE;QAAED,CAAC,EAAE,CAAC,CAAC;QAAEC,CAAC,EAAE,CAAC;MAAC,CAAE,EAChB;QAAED,CAAC,EAAE,CAAC,CAAC;QAAEC,CAAC,EAAE,CAAC;MAAC,CAAE,CACjB,EACD,CACE;QAAED,CAAC,EAAE,CAAC;QAAEC,CAAC,EAAE,CAAC;MAAC,CAAE,EACf;QAAED,CAAC,EAAE,CAAC;QAAEC,CAAC,EAAE,CAAC;MAAC,CAAE,CAChB,EACD,CACE;QAAED,CAAC,EAAE,CAAC;QAAEC,CAAC,EAAE,CAAC;MAAC,CAAE,EACf;QAAED,CAAC,EAAE,CAAC;QAAEC,CAAC,EAAE,CAAC;MAAC,CAAE,CAChB,EACD,CACE;QAAED,CAAC,EAAE,CAAC;QAAEC,CAAC,EAAE;MAAC,CAAE,EACd;QAAED,CAAC,EAAE,CAAC;QAAEC,CAAC,EAAE;MAAC,CAAE,CACf,CACF;MAED,MAAMqC,SAAS,GAA+B,EAAE;MAChD,KAAK,MAAMC,SAAS,IAAIF,MAAM,EAAE;QAC9B,IACErD,KAAK,CAACiB,CAAC,GAAGsC,SAAS,CAAC,CAAC,CAAC,CAACtC,CAAC,CAAC,GAAGD,CAAC,GAAGuC,SAAS,CAAC,CAAC,CAAC,CAACvC,CAAC,CAAC,KAAKvB,IAAI,CAAC+D,CAAC,IACvDxD,KAAK,CAACiB,CAAC,GAAGsC,SAAS,CAAC,CAAC,CAAC,CAACtC,CAAC,CAAC,GAAGD,CAAC,GAAGuC,SAAS,CAAC,CAAC,CAAC,CAACvC,CAAC,CAAC,KAAKvB,IAAI,CAAC+D,CAAC,EAC7D;UACA,MAAMC,KAAK,GAAG;YACZzC,CAAC,EAAEf,QAAQ,CAACe,CAAC,GAAGuC,SAAS,CAAC,CAAC,CAAC,CAACvC,CAAC;YAC9BC,CAAC,EAAEhB,QAAQ,CAACgB,CAAC,GAAGsC,SAAS,CAAC,CAAC,CAAC,CAACtC;WAC9B;UACD,MAAMyC,GAAG,GAAG;YACV1C,CAAC,EAAEf,QAAQ,CAACe,CAAC,GAAGuC,SAAS,CAAC,CAAC,CAAC,CAACvC,CAAC,GAAG,CAAC;YAClCC,CAAC,EAAEhB,QAAQ,CAACgB,CAAC,GAAGsC,SAAS,CAAC,CAAC,CAAC,CAACtC,CAAC,GAAG;WAClC;UAED,IAAIwC,KAAK,CAACzC,CAAC,IAAI,CAAC,IAAIyC,KAAK,CAACzC,CAAC,GAAG,IAAI,CAACpB,IAAI,CAACoB,CAAC,IAAIyC,KAAK,CAACxC,CAAC,IAAI,CAAC,IAAIwC,KAAK,CAACxC,CAAC,GAAG,IAAI,CAACrB,IAAI,CAACqB,CAAC,IAAIjB,KAAK,CAACyD,KAAK,CAACxC,CAAC,CAAC,CAACwC,KAAK,CAACzC,CAAC,CAAC,KAAKvB,IAAI,CAACyB,IAAI,EACzHoC,SAAS,CAAC/B,IAAI,CAACkC,KAAK,CAAC;UACvB,IAAIC,GAAG,CAAC1C,CAAC,IAAI,CAAC,IAAI0C,GAAG,CAAC1C,CAAC,GAAG,IAAI,CAACpB,IAAI,CAACoB,CAAC,IAAI0C,GAAG,CAACzC,CAAC,IAAI,CAAC,IAAIyC,GAAG,CAACzC,CAAC,GAAG,IAAI,CAACrB,IAAI,CAACqB,CAAC,IAAIjB,KAAK,CAAC0D,GAAG,CAACzC,CAAC,CAAC,CAACyC,GAAG,CAAC1C,CAAC,CAAC,KAAKvB,IAAI,CAACyB,IAAI,EAC7GoC,SAAS,CAAC/B,IAAI,CAACmC,GAAG,CAAC;;;MAIzB,OAAOJ,SAAS;IAClB,CAAC;EA7PoD","names":["Mark","Opponent","constructor","size","nextAttack","attackMap","makeMove","board","lastMove","moves","getMoves","getRandomMove","Math","floor","random","length","saveMoves","shouldIBeAlamed","bestPoints","getBestPoints","console","log","find","x","y","None","freeCombinations","pointsToCheck","row","X","push","bests","map","combinations","filter","a","b","c","d","flat","tilesWithMarkAound","around","mark","possibilities","tilesAround","possibility","newX","newY","getMovesAround","origin","getMyMarksAround","getOppositeMoves","getOppositeFreeMoves","rel","opp","filt","getNextAttack","myTilesAround","movesAround","freeOpposite","danger","available","direction","O","front","end"],"sourceRoot":"","sources":["/home/nikodem/projects/school/src/app/opponentai.ts"],"sourcesContent":["import { Mark } from \"./types\";\n\nexport class Opponent {\n  private nextAttack: { x: number, y: number } | null = null;\n  private attackMap: { x: number, y: number }[] | null = null;\n\n  constructor(private size: { x: number, y: number }) {}\n\n  makeMove = (board: Mark[][], lastMove: { x: number, y: number }): { x: number, y: number } => {\n    const moves = this.getMoves(board);\n\n    const getRandomMove = () => moves[Math.floor(Math.random() * moves.length)];\n\n    const saveMoves = this.shouldIBeAlamed(board, lastMove);\n    if (saveMoves.length > 0)\n      return saveMoves[0]\n\n    if (!this.attackMap) {\n      const bestPoints = this.getBestPoints(board)\n      console.log('bestPoints', bestPoints)\n      this.attackMap = bestPoints[0]\n    }\n\n    return this.attackMap.find(({ x, y }) => board[y][x] === Mark.None) || getRandomMove()\n\n  }\n\n  private getBestPoints = (board: Mark[][]) => {\n    const freeCombinations = [\n      [\n        { x: -2, y: 0 },\n        { x: -1, y: 0 },\n        { x: 1, y: 0 },\n        { x: 2, y: 0 },\n      ],\n      [\n        { x: 0, y: -2 },\n        { x: 0, y: -1 },\n        { x: 0, y: 1 },\n        { x: 0, y: 2 },\n      ],\n      [\n        { x: -2, y: -2 },\n        { x: -1, y: -1 },\n        { x: 1, y: 1 },\n        { x: 2, y: 2 },\n      ],\n      [\n        { x: -2, y: 2 },\n        { x: -1, y: 1 },\n        { x: 1, y: -1 },\n        { x: 2, y: -2 },\n      ],\n    ]\n\n    const pointsToCheck: { x: number, y: number }[] = []\n    for (let y = 0; y < board.length; y++) {\n      const row = board[y];\n      for (let x = 0; x < row.length; x++) {\n        if (board[y][x] === Mark.None || board[y][x] === Mark.X)\n          pointsToCheck.push({ x, y })\n      }\n    }\n\n    const bests = pointsToCheck.map(({ x, y }) => {\n       const combinations = freeCombinations.filter(([a, b, c, d]) =>\n          (board[y + a.y]?.[x + a.x] === Mark.X || board[y + a.y]?.[x + a.x] === Mark.None)\n          && (board[y + b.y]?.[x + b.x] === Mark.X || board[y + b.y]?.[x + b.x] === Mark.None)\n          && (board[y + c.y]?.[x + c.x] === Mark.X || board[y + c.y]?.[x + c.x] === Mark.None)\n          && (board[y + d.y]?.[x + d.x] === Mark.X || board[y + d.y]?.[x + d.x] === Mark.None)\n      )\n\n      return combinations.map(([a, b, c, d]) => {\n        return [\n          {\n            x: x + a.x,\n            y: y + a.y,\n          },\n          {\n            x: x + b.x,\n            y: y + b.y,\n          },\n          { x, y },\n          {\n            x: x + c.x,\n            y: y + c.y,\n          },\n          {\n            x: x + d.x,\n            y: y + d.y,\n          },\n        ]\n      })\n    })\n\n    return bests.flat()\n  }\n\n  private getMoves = (board: Mark[][]): { x: number, y: number }[] => {\n    const moves: { x: number, y: number }[] = [];\n\n    for (let y = 0; y < board.length; y++) {\n      const row = board[y];\n      for (let x = 0; x < row.length; x++) {\n        if (board[y][x] === Mark.None) moves.push({ x, y });\n      }\n    }\n\n    return moves;\n  }\n\n  private tilesWithMarkAound = (board: Mark[][], around: { x: number, y: number }, mark: Mark): { x: number, y: number }[] => {\n    const { x, y } = around;\n\n    const possibilities = [\n      { x: 1, y: 1 },\n      { x: 0, y: 1 },\n      { x: -1, y: 1 },\n      { x: -1, y: 0 },\n      { x: -1, y: -1 },\n      { x: 0, y: -1 },\n      { x: 1, y: -1 },\n      { x: 1, y: 0 },\n    ];\n\n    const tilesAround: { x: number, y: number }[] = [];\n    for (const possibility of possibilities) {\n      const newX = x + possibility.x;\n      const newY = y + possibility.y;\n\n      if (newX >= 0 && newX < this.size.x && newY >= 0 && newY < this.size.y)\n        if (board[newY][newX] === mark)\n          tilesAround.push({ x: newX, y: newY });\n    }\n\n    return tilesAround;\n  }\n\n  private getMovesAround = (board: Mark[][], origin: { x: number, y: number }): { x: number, y: number }[] =>\n    this.tilesWithMarkAound(board, origin, Mark.None);\n\n  private getMyMarksAround = (board: Mark[][], origin: { x: number, y: number }): { x: number, y: number }[] =>\n    this.tilesWithMarkAound(board, origin, Mark.X);\n\n  private getOppositeMoves = (moves: { x: number, y: number }[], origin: { x: number, y: number }): { x: number, y: number }[] =>\n    moves.map(({ x, y }) => ({\n      x: 2 * origin.x - x,\n      y: 2 * origin.y - y,\n    }))\n  private getOppositeFreeMoves = (board: Mark[][], origin: { x: number, y: number }): { x: number, y: number }[] => {\n    // console.log('or', origin)\n\n    const rel = this.getMovesAround(board, origin)\n    // console.log('rel', rel)\n\n    const opp = this.getOppositeMoves(rel, origin)\n    // console.log('opp', opp)\n    const filt = opp.filter(({ x, y }) => board[y]?.[x] === Mark.None)\n    // console.log('filt', filt)\n    return filt\n  }\n\n  private getNextAttack = (board: Mark[][], nextAttack: { x: number, y: number }): { x: number, y: number } | null => {\n    const myTilesAround = this.getMyMarksAround(board, nextAttack)\n\n    if (myTilesAround.length <= 0) {\n      // console.log('a')\n      const movesAround = this.getMovesAround(board, nextAttack)\n\n      if (movesAround.length <= 0) {\n        // console.log('b')\n        return null\n      } else {\n        // console.log('c')\n        return movesAround[0]\n      }\n    } else {\n      // console.log('d')\n      const freeOpposite = this.getOppositeFreeMoves(board, nextAttack)\n\n      if (freeOpposite.length <= 0) {\n        // console.log('e')\n        const movesAround = this.getMovesAround(board, nextAttack)\n\n        if (movesAround.length <= 0) {\n          // console.log('f')\n          return null\n        } else {\n          // console.log('g')\n          return movesAround[0]\n        }\n      } else {\n        // console.log('h')\n        return freeOpposite[0]\n      }\n    }\n  }\n\n  private shouldIBeAlamed = (board: Mark[][], lastMove: { x: number, y: number }): { x: number, y: number }[] => {\n    const { x, y } = lastMove;\n\n    const danger = [\n      [\n        { x: 1, y: 1 },\n        { x: 2, y: 2 },\n      ],\n      [\n        { x: 0, y: 1 },\n        { x: 0, y: 2 },\n      ],\n      [\n        { x: -1, y: 1 },\n        { x: -2, y: 2 },\n      ],\n      [\n        { x: -1, y: 0 },\n        { x: -2, y: 0 },\n      ],\n      [\n        { x: -1, y: -1 },\n        { x: -2, y: -2 },\n      ],\n      [\n        { x: 0, y: -1 },\n        { x: 0, y: -2 },\n      ],\n      [\n        { x: 1, y: -1 },\n        { x: 2, y: -2 },\n      ],\n      [\n        { x: 1, y: 0 },\n        { x: 2, y: 0 },\n      ],\n    ];\n\n    const available: { x: number, y: number }[] = [];\n    for (const direction of danger) {\n      if (\n        board[y + direction[0].y]?.[x + direction[0].x] === Mark.O\n        && board[y + direction[1].y]?.[x + direction[1].x] === Mark.O\n      ) {\n        const front = {\n          x: lastMove.x - direction[0].x,\n          y: lastMove.y - direction[0].y,\n        }\n        const end = {\n          x: lastMove.x + direction[0].x * 3,\n          y: lastMove.y + direction[0].y * 3,\n        }\n\n        if (front.x >= 0 && front.x < this.size.x && front.y >= 0 && front.y < this.size.y && board[front.y][front.x] === Mark.None)\n          available.push(front)\n        if (end.x >= 0 && end.x < this.size.x && end.y >= 0 && end.y < this.size.y && board[end.y][end.x] === Mark.None)\n          available.push(end)\n      }\n    }\n\n    return available\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}