{"ast":null,"code":"import { Mark } from \"./types\";\nexport class Opponent {\n  constructor(size) {\n    this.size = size;\n    this.nextAttack = null;\n    this.makeMove = (board, lastMove) => {\n      const moves = this.getMoves(board);\n      const getRandomMove = () => moves[Math.floor(Math.random() * moves.length)];\n      const move = this.shouldIBeAlamed(board, lastMove);\n      if (move && moves.includes(move)) return move;\n      if (!this.nextAttack) {\n        const thisAttack = getRandomMove();\n        // losuj nastÄ™pny atak\n        return thisAttack;\n      } else {\n        const thisAttack = this.nextAttack;\n        // losuj nastepny atak\n        return thisAttack;\n      }\n    };\n    this.getMoves = board => {\n      const moves = [];\n      for (let y = 0; y < board.length; y++) {\n        const row = board[y];\n        for (let x = 0; x < row.length; x++) {\n          if (board[y][x] === Mark.None) moves.push({\n            x,\n            y\n          });\n        }\n      }\n      return moves;\n    };\n    this.tilesWithMarkAound = (board, around, mark) => {\n      const {\n        x,\n        y\n      } = around;\n      const possibilities = [{\n        x: 1,\n        y: 1\n      }, {\n        x: 0,\n        y: 1\n      }, {\n        x: -1,\n        y: 1\n      }, {\n        x: -1,\n        y: 0\n      }, {\n        x: -1,\n        y: -1\n      }, {\n        x: 0,\n        y: -1\n      }, {\n        x: 1,\n        y: -1\n      }, {\n        x: 1,\n        y: 0\n      }];\n      const tilesAround = [];\n      for (const possibility of possibilities) {\n        const newX = x + possibility.x;\n        const newY = y + possibility.y;\n        if (newX >= 0 && newX < this.size.x && newY >= 0 && newY < this.size.y) if (board[newY][newX] === mark) tilesAround.push({\n          x: newX,\n          y: newY\n        });\n      }\n      return tilesAround;\n    };\n    this.getMovesAround = (board, x, y) => this.tilesWithMarkAound(board, {\n      x,\n      y\n    }, Mark.None);\n    this.getMyMarksAround = (board, x, y) => this.tilesWithMarkAound(board, {\n      x,\n      y\n    }, Mark.X);\n    this.getOppositeMoves = (moves, origin) => moves.map(({\n      x,\n      y\n    }) => ({\n      x: 2 * origin.x - x,\n      y: 2 * origin.y - y\n    }));\n    this.getOppositeFreeMoves = (board, origin) => this.getOppositeMoves(this.getMovesAround(board, origin.x, origin.y), origin).filter(({\n      x,\n      y\n    }) => board[y][x] === Mark.None);\n    this.shouldIBeAlamed = (board, lastMove) => {\n      const {\n        x,\n        y\n      } = lastMove;\n      const danger = [[{\n        x: 1,\n        y: 1\n      }, {\n        x: 2,\n        y: 2\n      }], [{\n        x: 0,\n        y: 1\n      }, {\n        x: 0,\n        y: 2\n      }], [{\n        x: -1,\n        y: 1\n      }, {\n        x: -2,\n        y: 2\n      }], [{\n        x: -1,\n        y: 0\n      }, {\n        x: -2,\n        y: 0\n      }], [{\n        x: -1,\n        y: -1\n      }, {\n        x: -2,\n        y: -2\n      }], [{\n        x: 0,\n        y: -1\n      }, {\n        x: 0,\n        y: -2\n      }], [{\n        x: 1,\n        y: -1\n      }, {\n        x: 2,\n        y: -2\n      }], [{\n        x: 1,\n        y: 0\n      }, {\n        x: 2,\n        y: 0\n      }]];\n      for (const direction of danger) {\n        if (board[y + direction[0].y]?.[x + direction[0].x] === Mark.X && board[y + direction[1].y]?.[x + direction[1].x] === Mark.X) {\n          if (board[y + direction[0].y]?.[x + direction[0].x] === Mark.None) {\n            return {\n              x: x + direction[0].x,\n              y: y + direction[0].y\n            };\n          } else if (board[y + direction[1].y * 3]?.[x + direction[1].x * 3] === Mark.None) {\n            return {\n              x: x - direction[1].x * 3,\n              y: y - direction[1].y * 3\n            };\n          }\n        }\n      }\n      return null;\n    };\n  }\n}","map":{"version":3,"mappings":"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","names":["Mark","Opponent","constructor","size","nextAttack","makeMove","board","lastMove","moves","getMoves","getRandomMove","Math","floor","random","length","move","shouldIBeAlamed","includes","thisAttack","y","row","x","None","push","tilesWithMarkAound","around","mark","possibilities","tilesAround","possibility","newX","newY","getMovesAround","getMyMarksAround","X","getOppositeMoves","origin","map","getOppositeFreeMoves","filter","danger","direction"],"sourceRoot":"","sources":["/home/nikodem/projects/school/src/app/opponentai.ts"],"sourcesContent":["import { Mark } from \"./types\";\n\nexport class Opponent {\n  private nextAttack: { x: number, y: number } | null = null;\n\n  constructor(private size: { x: number, y: number }) {}\n\n  makeMove = (board: Mark[][], lastMove: { x: number, y: number }): { x: number, y: number } => {\n    const moves = this.getMoves(board);\n\n    const getRandomMove = () => moves[Math.floor(Math.random() * moves.length)];\n\n    const move = this.shouldIBeAlamed(board, lastMove);\n    if (move && moves.includes(move))\n      return move;\n\n    if (!this.nextAttack) {\n      const thisAttack = getRandomMove()\n      // losuj nastÄ™pny atak\n      return thisAttack\n    } else {\n      const thisAttack = this.nextAttack\n      // losuj nastepny atak\n      return thisAttack\n    }\n  }\n\n  private getMoves = (board: Mark[][]): { x: number, y: number }[] => {\n    const moves: { x: number, y: number }[] = [];\n\n    for (let y = 0; y < board.length; y++) {\n      const row = board[y];\n      for (let x = 0; x < row.length; x++) {\n        if (board[y][x] === Mark.None) moves.push({ x, y });\n      }\n    }\n\n    return moves;\n  }\n\n  private tilesWithMarkAound = (board: Mark[][], around: { x: number, y: number }, mark: Mark): { x: number, y: number }[] => {\n    const { x, y } = around;\n\n    const possibilities = [\n      { x: 1, y: 1 },\n      { x: 0, y: 1 },\n      { x: -1, y: 1 },\n      { x: -1, y: 0 },\n      { x: -1, y: -1 },\n      { x: 0, y: -1 },\n      { x: 1, y: -1 },\n      { x: 1, y: 0 },\n    ];\n\n    const tilesAround: { x: number, y: number }[] = [];\n    for (const possibility of possibilities) {\n      const newX = x + possibility.x;\n      const newY = y + possibility.y;\n\n      if (newX >= 0 && newX < this.size.x && newY >= 0 && newY < this.size.y)\n        if (board[newY][newX] === mark)\n          tilesAround.push({ x: newX, y: newY });\n    }\n\n    return tilesAround;\n  }\n\n  private getMovesAround = (board: Mark[][], x: number, y: number): { x: number, y: number }[] =>\n    this.tilesWithMarkAound(board, { x, y }, Mark.None);\n\n  private getMyMarksAround = (board: Mark[][], x: number, y: number): { x: number, y: number }[] =>\n    this.tilesWithMarkAound(board, { x, y }, Mark.X);\n\n  private getOppositeMoves = (moves: { x: number, y: number }[], origin: { x: number, y: number }): { x: number, y: number }[] =>\n    moves.map(({ x, y }) => ({\n      x: 2 * origin.x - x,\n      y: 2 * origin.y - y,\n    }))\n  private getOppositeFreeMoves = (board: Mark[][], origin: { x: number, y: number }): { x: number, y: number }[] =>\n    this.getOppositeMoves(this.getMovesAround(board, origin.x, origin.y), origin).filter(({ x, y }) => board[y][x] === Mark.None)\n\n  private shouldIBeAlamed = (board: Mark[][], lastMove: { x: number, y: number }): { x: number, y: number } | null => {\n    const { x, y } = lastMove;\n\n    const danger = [\n      [\n        { x: 1, y: 1 },\n        { x: 2, y: 2 },\n      ],\n      [\n        { x: 0, y: 1 },\n        { x: 0, y: 2 },\n      ],\n      [\n        { x: -1, y: 1 },\n        { x: -2, y: 2 },\n      ],\n      [\n        { x: -1, y: 0 },\n        { x: -2, y: 0 },\n      ],\n      [\n        { x: -1, y: -1 },\n        { x: -2, y: -2 },\n      ],\n      [\n        { x: 0, y: -1 },\n        { x: 0, y: -2 },\n      ],\n      [\n        { x: 1, y: -1 },\n        { x: 2, y: -2 },\n      ],\n      [\n        { x: 1, y: 0 },\n        { x: 2, y: 0 },\n      ],\n    ];\n\n    for (const direction of danger) {\n      if (\n        board[y + direction[0].y]?.[x + direction[0].x] === Mark.X\n        && board[y + direction[1].y]?.[x + direction[1].x] === Mark.X\n      ) {\n        if (board[y + direction[0].y]?.[x + direction[0].x] === Mark.None) {\n          return {\n            x: x + direction[0].x,\n            y: y + direction[0].y,\n          };\n        } else if (board[y + direction[1].y * 3]?.[x + direction[1].x * 3] === Mark.None) {\n          return {\n            x: x - direction[1].x * 3,\n            y: y - direction[1].y * 3,\n          };\n        }\n      }\n    }\n\n    return null\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}