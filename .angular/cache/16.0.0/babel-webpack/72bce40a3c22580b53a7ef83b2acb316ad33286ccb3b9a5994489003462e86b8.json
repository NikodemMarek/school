{"ast":null,"code":"import { Mark } from \"./types\";\nexport class Opponent {\n  constructor(size) {\n    this.size = size;\n    this.opponentMoves = [];\n    this.makeMove = (board, lastMove) => {\n      console.log(\"Opponent is thinking...\", lastMove);\n      this.opponentMoves.push(lastMove);\n      return moves[Math.floor(Math.random() * moves.length)];\n    };\n    this.getMoves = board => {\n      const moves = [];\n      for (let y = 0; y < board.length; y++) {\n        const row = board[y];\n        for (let x = 0; x < row.length; x++) {\n          if (board[y][x] === Mark.None) moves.push({\n            x,\n            y\n          });\n        }\n      }\n      return moves;\n    };\n  }\n}","map":{"version":3,"mappings":"AAAA,SAASA,IAAI,QAAQ,SAAS;AAE9B,OAAM,MAAOC,QAAQ;EAGnBC,YAAoBC,IAAY;IAAZ,KAAAA,IAAI,GAAJA,IAAI;IAFhB,KAAAC,aAAa,GAA+B,EAAE;IAItD,KAAAC,QAAQ,GAAG,CAACC,KAAe,EAAEC,QAAkC,KAA8B;MAC3FC,OAAO,CAACC,GAAG,CAAC,yBAAyB,EAAEF,QAAQ,CAAC;MAChD,IAAI,CAACH,aAAa,CAACM,IAAI,CAACH,QAAQ,CAAC;MAEjC,OAAOI,KAAK,CAACC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,EAAE,GAAGH,KAAK,CAACI,MAAM,CAAC,CAAC;IACxD,CAAC;IAED,KAAAC,QAAQ,GAAIV,KAAe,IAAgC;MACzD,MAAMK,KAAK,GAA+B,EAAE;MAE5C,KAAK,IAAIM,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGX,KAAK,CAACS,MAAM,EAAEE,CAAC,EAAE,EAAE;QACrC,MAAMC,GAAG,GAAGZ,KAAK,CAACW,CAAC,CAAC;QACpB,KAAK,IAAIE,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGD,GAAG,CAACH,MAAM,EAAEI,CAAC,EAAE,EAAE;UACnC,IAAIb,KAAK,CAACW,CAAC,CAAC,CAACE,CAAC,CAAC,KAAKnB,IAAI,CAACoB,IAAI,EAAET,KAAK,CAACD,IAAI,CAAC;YAAES,CAAC;YAAEF;UAAC,CAAE,CAAC;;;MAIvD,OAAON,KAAK;IACd,CAAC;EApBkC","names":["Mark","Opponent","constructor","size","opponentMoves","makeMove","board","lastMove","console","log","push","moves","Math","floor","random","length","getMoves","y","row","x","None"],"sourceRoot":"","sources":["/home/nikodem/projects/school/src/app/opponentai.ts"],"sourcesContent":["import { Mark } from \"./types\";\n\nexport class Opponent {\n  private opponentMoves: { x: number, y: number }[] = [];\n\n  constructor(private size: number) {}\n\n  makeMove = (board: Mark[][], lastMove: { x: number, y: number }): { x: number, y: number } => {\n    console.log(\"Opponent is thinking...\", lastMove);\n    this.opponentMoves.push(lastMove);\n\n    return moves[Math.floor(Math.random() * moves.length)];\n  }\n\n  getMoves = (board: Mark[][]): { x: number, y: number }[] => {\n    const moves: { x: number, y: number }[] = [];\n\n    for (let y = 0; y < board.length; y++) {\n      const row = board[y];\n      for (let x = 0; x < row.length; x++) {\n        if (board[y][x] === Mark.None) moves.push({ x, y });\n      }\n    }\n\n    return moves;\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}