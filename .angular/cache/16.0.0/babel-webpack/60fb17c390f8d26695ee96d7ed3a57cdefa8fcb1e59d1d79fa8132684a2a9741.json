{"ast":null,"code":"import { Mark } from \"./types\";\nexport class Opponent {\n  constructor(size) {\n    this.size = size;\n    this.nextAttack = null;\n    this.makeMove = (board, lastMove) => {\n      const moves = this.getMoves(board);\n      const a = this.whereAreMyMarksAround(board, lastMove.x, lastMove.y);\n      const b = movesAround?.find(({\n        x,\n        y\n      }) => board[2 * lastMove.y - y][2 * lastMove.x - x] === Mark.None);\n      console.log('movesAround', a);\n      console.log('moveWithNothingOpposite', b);\n      const getRandomMove = () => moves[Math.floor(Math.random() * moves.length)];\n      const move = this.shouldIBeAlamed(board, lastMove);\n      if (move && moves.includes(move)) return move;\n      if (!this.nextAttack) {\n        const randomMove = getRandomMove();\n        const movesAround = this.whereAreMyMarksAround(board, randomMove.x, randomMove.y);\n        if (!movesAround) {\n          console.log('4', randomMove);\n          this.nextAttack = this.getMovesAround(board, randomMove.x, randomMove.y)[0] || null;\n          return randomMove;\n        }\n        const moveWithNothingOpposite = movesAround?.find(({\n          x,\n          y\n        }) => board[2 * randomMove.y - y][2 * randomMove.x - x] === Mark.None);\n        if (!moveWithNothingOpposite) {\n          this.nextAttack = this.getMovesAround(board, randomMove.x, randomMove.y)[0] || null;\n          return randomMove;\n        }\n        console.log('3', this.nextAttack);\n        this.nextAttack = moveWithNothingOpposite;\n        return randomMove;\n      }\n      const movesAround = this.whereAreMyMarksAround(board, this.nextAttack.x, this.nextAttack.y);\n      if (!movesAround) {\n        console.log('2', this.nextAttack);\n        const attackThisTurn = this.nextAttack;\n        this.nextAttack = this.getMovesAround(board, this.nextAttack.x, this.nextAttack.y)[0] || null;\n        return attackThisTurn;\n      }\n      const moveWithNothingOpposite = movesAround?.find(({\n        x,\n        y\n      }) => board[2 * this.nextAttack.y - y][2 * this.nextAttack.x - x] === Mark.None);\n      if (!moveWithNothingOpposite) {\n        console.log('1', this.nextAttack);\n        const attackThisTurn = this.nextAttack;\n        this.nextAttack = this.getMovesAround(board, this.nextAttack.x, this.nextAttack.y)[0] || null;\n        return attackThisTurn;\n      }\n      console.log('5', this.nextAttack);\n      const attackThisTurn = this.nextAttack;\n      this.nextAttack = moveWithNothingOpposite;\n      return attackThisTurn;\n    };\n    this.getMoves = board => {\n      const moves = [];\n      for (let y = 0; y < board.length; y++) {\n        const row = board[y];\n        for (let x = 0; x < row.length; x++) {\n          if (board[y][x] === Mark.None) moves.push({\n            x,\n            y\n          });\n        }\n      }\n      return moves;\n    };\n    this.getMovesAround = (board, x, y) => {\n      const possibilities = [{\n        x: 1,\n        y: 1\n      }, {\n        x: 0,\n        y: 1\n      }, {\n        x: -1,\n        y: 1\n      }, {\n        x: -1,\n        y: 0\n      }, {\n        x: -1,\n        y: -1\n      }, {\n        x: 0,\n        y: -1\n      }, {\n        x: 1,\n        y: -1\n      }, {\n        x: 1,\n        y: 0\n      }];\n      const movesAround = [];\n      for (const possibility of possibilities) {\n        const newX = x + possibility.x;\n        const newY = y + possibility.y;\n        if (newX >= 0 && newX < this.size.x && newY >= 0 && newY < this.size.y) if (board[newY][newX] === Mark.None) movesAround.push({\n          x: newX,\n          y: newY\n        });\n      }\n      return movesAround;\n    };\n    this.whereAreMyMarksAround = (board, x, y) => {\n      const possibilities = [{\n        x: 1,\n        y: 1\n      }, {\n        x: 0,\n        y: 1\n      }, {\n        x: -1,\n        y: 1\n      }, {\n        x: -1,\n        y: 0\n      }, {\n        x: -1,\n        y: -1\n      }, {\n        x: 0,\n        y: -1\n      }, {\n        x: 1,\n        y: -1\n      }, {\n        x: 1,\n        y: 0\n      }];\n      const marksAround = [];\n      for (const possibility of possibilities) {\n        const newX = x + possibility.x;\n        const newY = y + possibility.y;\n        if (newX >= 0 && newX < this.size.x && newY >= 0 && newY < this.size.y) if (board[newY][newX] === Mark.X) marksAround.push({\n          x: newX,\n          y: newY\n        });\n      }\n      if (marksAround.length > 0) return marksAround;\n      return null;\n    };\n    this.shouldIBeAlamed = (board, lastMove) => {\n      const {\n        x,\n        y\n      } = lastMove;\n      const danger = [[{\n        x: 1,\n        y: 1\n      }, {\n        x: 2,\n        y: 2\n      }], [{\n        x: 0,\n        y: 1\n      }, {\n        x: 0,\n        y: 2\n      }], [{\n        x: -1,\n        y: 1\n      }, {\n        x: -2,\n        y: 2\n      }], [{\n        x: -1,\n        y: 0\n      }, {\n        x: -2,\n        y: 0\n      }], [{\n        x: -1,\n        y: -1\n      }, {\n        x: -2,\n        y: -2\n      }], [{\n        x: 0,\n        y: -1\n      }, {\n        x: 0,\n        y: -2\n      }], [{\n        x: 1,\n        y: -1\n      }, {\n        x: 2,\n        y: -2\n      }], [{\n        x: 1,\n        y: 0\n      }, {\n        x: 2,\n        y: 0\n      }]];\n      for (const direction of danger) {\n        if (board[y + direction[0].y]?.[x + direction[0].x] === Mark.X && board[y + direction[1].y]?.[x + direction[1].x] === Mark.X) {\n          if (board[y + direction[0].y]?.[x + direction[0].x] === Mark.None) {\n            return {\n              x: x + direction[0].x,\n              y: y + direction[0].y\n            };\n          } else if (board[y + direction[1].y * 3]?.[x + direction[1].x * 3] === Mark.None) {\n            return {\n              x: x - direction[1].x * 3,\n              y: y - direction[1].y * 3\n            };\n          }\n        }\n      }\n      return null;\n    };\n  }\n}","map":{"version":3,"mappings":"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","names":["Mark","Opponent","constructor","size","nextAttack","makeMove","board","lastMove","moves","getMoves","a","whereAreMyMarksAround","x","y","b","movesAround","find","None","console","log","getRandomMove","Math","floor","random","length","move","shouldIBeAlamed","includes","randomMove","getMovesAround","moveWithNothingOpposite","attackThisTurn","row","push","possibilities","possibility","newX","newY","marksAround","X","danger","direction"],"sourceRoot":"","sources":["/home/nikodem/projects/school/src/app/opponentai.ts"],"sourcesContent":["import { Mark } from \"./types\";\n\nexport class Opponent {\n  private nextAttack: { x: number, y: number } | null = null;\n\n  constructor(private size: { x: number, y: number }) {}\n\n  makeMove = (board: Mark[][], lastMove: { x: number, y: number }): { x: number, y: number } => {\n    const moves = this.getMoves(board);\n\n    const a = this.whereAreMyMarksAround(board, lastMove.x, lastMove.y);\n    const b = movesAround?.find(({ x, y }) => board[2 * lastMove.y - y][2 * lastMove.x - x] === Mark.None);\n    console.log('movesAround', a);\n    console.log('moveWithNothingOpposite', b);\n\n    const getRandomMove = () => moves[Math.floor(Math.random() * moves.length)];\n\n    const move = this.shouldIBeAlamed(board, lastMove);\n    if (move && moves.includes(move))\n      return move;\n\n    if (!this.nextAttack) {\n      const randomMove = getRandomMove();\n      const movesAround = this.whereAreMyMarksAround(board, randomMove.x, randomMove.y)\n\n      if (!movesAround) {\n    console.log('4', randomMove);\n        this.nextAttack = this.getMovesAround(board, randomMove.x, randomMove.y)[0] || null\n        return randomMove;\n      }\n\n      const moveWithNothingOpposite = movesAround?.find(({ x, y }) => board[2 * randomMove.y - y][2 * randomMove.x - x] === Mark.None);\n      if (!moveWithNothingOpposite) {\n        this.nextAttack = this.getMovesAround(board, randomMove.x, randomMove.y)[0] || null\n        return randomMove;\n      }\n\n    console.log('3', this.nextAttack);\n      this.nextAttack = moveWithNothingOpposite;\n      return randomMove;\n    }\n\n    const movesAround = this.whereAreMyMarksAround(board, this.nextAttack.x, this.nextAttack.y);\n    if (!movesAround) {\n    console.log('2', this.nextAttack);\n      const attackThisTurn = this.nextAttack;\n      this.nextAttack = this.getMovesAround(board, this.nextAttack.x, this.nextAttack.y)[0] || null\n      return attackThisTurn;\n    }\n\n    const moveWithNothingOpposite = movesAround?.find(({ x, y }) => board[2 * this.nextAttack!.y - y][2 * this.nextAttack!.x - x] === Mark.None);\n    if (!moveWithNothingOpposite) {\n    console.log('1', this.nextAttack);\n\n      const attackThisTurn = this.nextAttack;\n      this.nextAttack = this.getMovesAround(board, this.nextAttack.x, this.nextAttack.y)[0] || null\n      return attackThisTurn;\n    }\n\n    console.log('5', this.nextAttack);\n\n    const attackThisTurn = this.nextAttack;\n    this.nextAttack = moveWithNothingOpposite;\n    return attackThisTurn;\n  }\n\n  private getMoves = (board: Mark[][]): { x: number, y: number }[] => {\n    const moves: { x: number, y: number }[] = [];\n\n    for (let y = 0; y < board.length; y++) {\n      const row = board[y];\n      for (let x = 0; x < row.length; x++) {\n        if (board[y][x] === Mark.None) moves.push({ x, y });\n      }\n    }\n\n    return moves;\n  }\n\n  private getMovesAround = (board: Mark[][], x: number, y: number): { x: number, y: number }[] => {\n    const possibilities = [\n      { x: 1, y: 1 },\n      { x: 0, y: 1 },\n      { x: -1, y: 1 },\n      { x: -1, y: 0 },\n      { x: -1, y: -1 },\n      { x: 0, y: -1 },\n      { x: 1, y: -1 },\n      { x: 1, y: 0 },\n    ];\n\n    const movesAround: { x: number, y: number }[] = [];\n    for (const possibility of possibilities) {\n      const newX = x + possibility.x;\n      const newY = y + possibility.y;\n\n      if (newX >= 0 && newX < this.size.x && newY >= 0 && newY < this.size.y)\n        if (board[newY][newX] === Mark.None)\n          movesAround.push({ x: newX, y: newY });\n    }\n\n    return movesAround;\n  }\n\n  private whereAreMyMarksAround = (board: Mark[][], x: number, y: number): { x: number, y: number }[] | null => {\n    const possibilities = [\n      { x: 1, y: 1 },\n      { x: 0, y: 1 },\n      { x: -1, y: 1 },\n      { x: -1, y: 0 },\n      { x: -1, y: -1 },\n      { x: 0, y: -1 },\n      { x: 1, y: -1 },\n      { x: 1, y: 0 },\n    ];\n\n    const marksAround: { x: number, y: number }[] = [];\n    for (const possibility of possibilities) {\n      const newX = x + possibility.x;\n      const newY = y + possibility.y;\n\n      if (newX >= 0 && newX < this.size.x && newY >= 0 && newY < this.size.y)\n        if (board[newY][newX] === Mark.X)\n          marksAround.push({ x: newX, y: newY });\n    }\n\n    if (marksAround.length > 0)\n      return marksAround\n\n    return null;\n  }\n\n  private shouldIBeAlamed = (board: Mark[][], lastMove: { x: number, y: number }): { x: number, y: number } | null => {\n    const { x, y } = lastMove;\n\n    const danger = [\n      [\n        { x: 1, y: 1 },\n        { x: 2, y: 2 },\n      ],\n      [\n        { x: 0, y: 1 },\n        { x: 0, y: 2 },\n      ],\n      [\n        { x: -1, y: 1 },\n        { x: -2, y: 2 },\n      ],\n      [\n        { x: -1, y: 0 },\n        { x: -2, y: 0 },\n      ],\n      [\n        { x: -1, y: -1 },\n        { x: -2, y: -2 },\n      ],\n      [\n        { x: 0, y: -1 },\n        { x: 0, y: -2 },\n      ],\n      [\n        { x: 1, y: -1 },\n        { x: 2, y: -2 },\n      ],\n      [\n        { x: 1, y: 0 },\n        { x: 2, y: 0 },\n      ],\n    ];\n\n    for (const direction of danger) {\n      if (\n        board[y + direction[0].y]?.[x + direction[0].x] === Mark.X\n        && board[y + direction[1].y]?.[x + direction[1].x] === Mark.X\n      ) {\n        if (board[y + direction[0].y]?.[x + direction[0].x] === Mark.None) {\n          return {\n            x: x + direction[0].x,\n            y: y + direction[0].y,\n          };\n        } else if (board[y + direction[1].y * 3]?.[x + direction[1].x * 3] === Mark.None) {\n          return {\n            x: x - direction[1].x * 3,\n            y: y - direction[1].y * 3,\n          };\n        }\n      }\n    }\n\n    return null\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}